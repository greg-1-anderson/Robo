{
    "docs": [
        {
            "location": "/", 
            "text": "Robo Documentation\n\n\n\n\nGetting Started\n\n\nCollections\n\n\n\n\nTasks\n\n\n\n\nApiGen\n\n\n[Archive] (tasks/Archive.md)\n\n\nAssets\n\n\nBase\n\n\nBower\n\n\nComposer\n\n\nDevelopment\n\n\nDocker\n\n\nFile\n\n\nFilesystem\n\n\nGulp\n\n\nNpm\n\n\nRemote\n\n\nTesting\n\n\nVcs", 
            "title": "Introduction"
        }, 
        {
            "location": "/#robo-documentation", 
            "text": "Getting Started  Collections", 
            "title": "Robo Documentation"
        }, 
        {
            "location": "/#tasks", 
            "text": "ApiGen  [Archive] (tasks/Archive.md)  Assets  Base  Bower  Composer  Development  Docker  File  Filesystem  Gulp  Npm  Remote  Testing  Vcs", 
            "title": "Tasks"
        }, 
        {
            "location": "/getting-started/", 
            "text": "Getting Started\n\n\nTo begin you need to create a RoboFile. Just run \nrobo init\n in empty dir:\n\n\nrobo init\n\n\n\n\nThis will create a new \nRoboFile.php\n for you. There will be RoboFile class which extends \n\\Robo\\Tasks\n, which includes all bundled tasks of Robo.\n\n\n?php\nclass RoboFile extends \\Robo\\Tasks\n{\n}\n?\n\n\n\n\n\nCommands\n\n\nAll public methods of the RoboFile class will be treated as \ncommands\n. You can run them from the CLI and pass arguments.\n\n\n?php\nclass RoboFile extends \\Robo\\Tasks\n{\n    function hello($world)\n    {\n        $this-\nsay(\nHello, $world\n);\n    }\n}\n?\n\n\n\n\n\nWhen we run:\n\n\nrobo hello davert\n\u279c Hello, davert\n\n\n\n\nMethod names should be camelCased. In CLI \ncamelCased\n method will be available as \ncamel:cased\n command.\n\nlongCamelCased\n method will be transformed to \nlong:camel-cased\n command.\n\n\nArguments\n\n\nAll method parameters without default values are treated as required arguments. In our example command \nhello\n requires one argument.\nIf you pass a default value to parameter the argument becomes optional:\n\n\n?php\n    function hello($world = 'world')\n    {\n        $this-\nsay(\nHello, $world\n);\n    }\n?\n\n\n\n\n\nrobo hello\n\u279c Hello, world\n\n\n\n\nTo accept multiple, variable arguments, define a parameter as an \narray\n; Robo will then pass all CLI arguments in this variable:\n\n\n?php\n    function hello(array $world)\n    {\n        $this-\nsay(\nHello, \n . implode(', ', $world));\n    }\n?\n\n\n\n\n\nrobo hello davert jon bill bob\n\u279c Hello, davert, jon, bill, bob\n\n\n\n\nOptions\n\n\nTo define command options you should define the last method parameter as an associative array where the keys define the option names and the values provide each option's default values:\n\n\n?php\n    function hello($opts = ['silent' =\n false])\n    {\n        if (!$opts['silent']) $this-\nsay(\nHello, world\n);\n    }\n?\n\n\n\n\n\nrobo hello\n\u279c Hello, world\n\nrobo hello --silent\n\n\n\n\nA one-character shortcut can be specified for option:\n\n\n?php\n    function hello($opts = ['silent|s' =\n false])\n    {\n        if (!$opts['silent']) $this-\nsay(\nHello, world\n);\n    }\n?\n\n\n\n\n\nNow command can be executed with '-s' to run in silent mode: \n\n\nrobo hello -s\n\n\n\n\nLoad From Other Directories\n\n\nRobo can execute commands from a RoboFile located in different directory.\nYou can specify the path to another RoboFile by including the \n--load-from\n option:\n\n\nrobo run --load-from /path/to/my/other/project\n\n\n\n\nPass-Through Arguments\n\n\nSometimes you need to pass arguments from your command into a task. A command line after the \n--\n characters is treated as one argument.\nAny special character like \n-\n will be passed into without change.\n\n\n?php\n    function ls($args)\n    {\n        $this-\ntaskExec('ls')-\nargs($args)-\nrun();\n    }\n?\n\n\n\n\n\nrobo ls -- Robo -c --all\n [Robo\\Task\\ExecTask] running ls Robo -c --all\n .  ..  CHANGELOG.md  codeception.yml  composer.json  composer.lock  docs  .git  .gitignore  .idea  LICENSE  README.md  robo  RoboFile.php  robo.phar  src  tests  .travis.yml  vendor\n\n\n\n\nHelp\n\n\nThe help text for a command in a RoboFile may be provided in Doc-Block comments. An example help Doc-Block comment is shown below:\n\n\n?php\n/**\n * Calculate the fibonacci sequence between two numbers.\n *\n * Graphic output will look like\n *     +----+---+-------------+\n *     |    |   |             |\n *     |    |-+-|             |\n *     |----+-+-+             |\n *     |        |             |\n *     |        |             |\n *     |        |             |\n *     +--------+-------------+\n *\n * @param int $start Number to start from\n * @param int $steps Number of steps to perform\n * @param array $opts\n * @option $graphic Display the sequence graphically using cube\n *                  representation\n */\npublic function fibonacci($start, $steps, $opts = ['graphic' =\n false])\n{\n}\n?\n\n\n\n\n\nThe corresponding help text produced is:\n\n\nrobo fibonacci --help\nUsage:\n fibonacci [--graphic] start steps\n\nArguments:\n start                 Number to start from\n steps                 Number of steps to perform\n\nOptions:\n --graphic             Display the sequence graphically using cube representation\n\nHelp:\n Graphic output will look like\n     +----+---+-------------+\n     |    |   |             |\n     |    |-+-|             |\n     |----+-+-+             |\n     |        |             |\n     |        |             |\n     |        |             |\n     +--------+-------------+\n\n\n\n\nArguments and options are populated from annotations.\n\n\nInitially added with \nPR by @jonsa\n; now provided by the \nconsolidation/annotated-command\n project, which was factored out from Robo.\n\n\nIgnored methods\n\n\nRobo ignores any method of your RoboFile that begins with \nget\n or \nset\n. These methods are presumed to be data accessors, not commands.  To implement a command whose name contains \nget\n or \nset\n, use the \n@command\n annotation.\n\n\n?php\n    /**\n     * @command set-alignment\n     */\n    function setAlignment($value)\n    {\n        ...\n    }\n?\n\n\n\n\n\nTasks\n\n\nRobo commands typically divide the work they need to accomplish into \ntasks\n. The command first determines what needs to be done, inspecting current state if necessary, and then sets up and executes one or more tasks that make the actual changes needed by the command.  (See also the documentation on \nCollections\n, which allow you to combine groups of tasks which can provide rollback functions to recover from failure situations.)\n\n\nThe convention used to add new tasks for use in your RoboFiles is to create a wrapper trait that instantiates the implementation class for each task. Each task method in the trait should start with the prefix \ntask\n, and should use \nchained method calls\n for configuration. Task execution should be triggered by the method \nrun\n. \n\n\nIt is recommended to have store your trait loading task in a \nloadTasks\n file in the same namespace as the task implementation.\n\n\nA very basic task is shown below.  The namespace is \nMyAssetTasks\n, and the example task is \nCompileAssets\n. To customize to your purposes, choose an appropriate namespace, and then define as many tasks as you need.\n\n\n?php\nnamespace MyAssetTasks;\n\ntrait loadTasks\n{\n    /**\n     * Example task to compile assets\n     *\n     * @param string $pathToCompileAssets\n     * @return \\MyAssetTasks\\CompileAssets\n     */\n    protected function taskCompileAssets($path = null)\n    {\n        // Always construct your tasks with the `task()` task builder.\n        return $this-\ntask(CompileAssets::class, $path);\n    }\n}\n\nclass CompileAssets implements \\Robo\\Contract\\TaskInterface\n{\n    // configuration params\n    protected $path;\n    protected $to;\n    function __construct($path)\n    {\n        $this-\npath = $path;\n    }\n\n    function to($filename)\n    {\n        $this-\nto = $filename;\n        // must return $this\n        return $this;\n    }\n\n    // must implement Run\n    function run()\n    {\n        //....\n    }\n}\n?\n\n\n\n\n\nTo use it in a RoboFile, include the task via its trait:\n\n\n?php\nclass RoboFile extends \\Robo\\Tasks\n{\n    use \\MyAssetTasks\\loadTasks;\n\n    public function build()\n    {\n        $this-\ntaskCompileAssets('web/css-src')\n            -\nto('web/assets.min.css')\n            -\nrun();\n    }\n}\n?\n\n\n\n\n\nRobo\\Tasks includes all of the standard task traits by default, so a RoboFile may call the \n$this-\ntaskXXX\n method for any of these tasks. To use an external task, ensure that its class files are available (e.g. \nrequire\n its project in your composer.json file), and include corresponding trait or traits in your Robofile.\n\n\nShortcuts\n\n\nSome tasks may have shortcuts. If a task does not require multi-step configuration, it can be executed with a single line:\n\n\n?php\n$this-\n_exec('ps aux');\n$this-\n_copy('config/env.example.yml','config/env.yml');\n?\n\n\n\n\n\nResult\n\n\nEach task must return an instance of \nRobo\\Result\n. A Robo Result contains the task instance, exit code, message, and any variable data that the task may wish to return.\n\n\nThe \nrun\n method of \nCompileAssets\n class may look like this:\n\n\nreturn new Robo\\Result($this, $exitCode, \nAssets compiled\n);\n\n\n\n\nor\n\n\nreturn Robo\\Result::success($this, \nAssets compiled\n);\nreturn Robo\\Result::error($this, \nFailed to compile assets\n);\n\n\n\n\nYou can use this results to check if execution was successful, either using the \nwasSuccessful()\n method, or via the \ninvoke\n shortcut. We will use the \nExec\n task in next example to illustrate this:\n\n\n?php\nclass RoboFile\n{\n    use Robo\\Task\\Base\\loadShortcuts;\n\n    function test()\n    {\n        $res1 = $this-\n_exec('phpunit tests/integration');\n        $res2 = $this-\n_exec('phpunit tests/unit');\n\n        // print message when tests passed\n        if ($res1-\nwasSuccessful() and $res2-\nwasSuccessful()) $this-\nsay(\nAll tests passed\n);\n    }\n}\n?\n\n\n\n\n\nSome tasks may also attach data to the Result object.  If this is done, the data may be accessed as an array; for example, \n$result['path'];\n. This is not common.\n\n\nCommands should return a Result object obtained from a task; this will ensure that the command exit code is set correctly.  If a command does not have a Result object available, then it may use a ResultData object.  ResultData objects are just like Result objects, except the do not contain a reference to a task.\n\n\nreturn new Robo\\ResultData($exitcode, 'Error message.');\n\n\nIf the command returns a TaskInterface instead of a result, then the task will be executed, and the result from that task will be used as the final result of the command. See also \nFormatters\n, below.\n\n\nStack\n\n\nSome tasks contain \nStack\n in their name. These are called \"stack\" tasks, and they execute similar tasks one after the other.  Each of the primary methods in a stack class executes an operation.\n\n\nStack tasks also contain a \nstopOnFail\n method which can be used to stop task execution if one of its commands was unsuccessful.\n\n\nGlobal StopOnFail\n\n\nThere is a global \nstopOnFail\n method as well, that can be used to stop a command on first failure of a task.\n\n\n$this-\nstopOnFail(true);\n\n\n\n\nIO\n\n\nAs you noticed, you can print text via the \nsay\n method, which is taken from the \nRobo\\Output\n trait.\n\n\n$this-\nsay(\nHello\n);\n\n\n\n\nAlso, you can ask for input from console:\n\n\n$name = $this-\nask(\nWhat is your name?\n);\n\n\n\n\nThere are also \naskDefault\n, \naskHidden\n, and \nconfirm\n methods.\n\n\nInside tasks you should print process details with \nprintTaskInfo\n, \n`printTaskSuccess\n, and \nprintTaskError\n.\n\n\nTo allow tasks access IO, use the \nRobo\\Common\\TaskIO\n trait, or inherit your task class from \nRobo\\Task\\BaseTask\n (recommended).\n\n\n$this-\nprintTaskInfo('Processing...');\n\n\n\n\nThe Task IO methods send all output through a PSR-3 logger. Tasks should use task IO exclusively; methods such as 'say' and 'ask' should reside in the command method. This allows tasks to be usable in any context that has a PSR-3 logger, including background or server processes where it is not possible to directly query the user.\n\n\nFormatters\n\n\nIt is preferable for commands that look up and display information should avoid doing IO directly, and should instead return the data they wish to display as an array. This data can then be converted into different data formats, such as \"table\" and \"json\". The user may select which formatter to use via the --format option.\n\n\nProgress\n\n\nRobo supports progress indicators via the Symfony ProgressBar class.  Long-running tasks that wish to display the progress indicator may do so via four simple steps:\n\n\n\n\nOverride the \nprogressIndicatorSteps()\n method and return the number of \"steps\" in the operation.\n\n\nCall \n$this-\nstartProgressIndicator()\n to begin the progress indicator running.\n\n\nCall \n$this-\nadvanceProgressIndicator()\n a number of times equal to the result returned by \nprogressIndicatorSteps()\n\n\nCall \n$this-\nstopProgressIndicator()\n when the operation is completed.\n\n\n\n\nAn example of this is shown below:\n\n\n?php\nclass MyTask extends BaseTask\n{\n    protected $steps = 10;\n\n    public function progressIndicatorSteps()\n    {\n        return $this-\nsteps;\n    }\n\n    public function run()\n    {\n        $exitCode = 0;\n        $errorMessage = \n;\n\n        $this-\nstartProgressIndicator();\n        for ($i = 0; $i \n $this-\nsteps; ++$i) {\n            $this-\nadvanceProgressIndicator();\n        }\n        $this-\nstopProgressIndicator();\n\n        return new Result($this, $exitCode, $errorMessage, ['time' =\n $this-\ngetExecutionTime()]);\n    }\n}\n?\n\n\n\n\n\nTasks should not attempt to use a specific progress indicator (e.g. the Symfony ProgressBar class) directly, as the ProgressIndicatorAwareTrait allows for an appropriate progress indicator to be used (or omitted) as best suits the application.\n\n\nNote that when using \nCollections\n, the progress bar will automatically be shown if the collection takes longer than two seconds to run.  Each task in the collection will count for one \"step\"; if the task supports progress indicators as shown above, then it will add an additional number of steps as indicated by its \nprogressIndicatorSteps()\n method.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/getting-started/#getting-started", 
            "text": "To begin you need to create a RoboFile. Just run  robo init  in empty dir:  robo init  This will create a new  RoboFile.php  for you. There will be RoboFile class which extends  \\Robo\\Tasks , which includes all bundled tasks of Robo.  ?php\nclass RoboFile extends \\Robo\\Tasks\n{\n}\n?", 
            "title": "Getting Started"
        }, 
        {
            "location": "/getting-started/#commands", 
            "text": "All public methods of the RoboFile class will be treated as  commands . You can run them from the CLI and pass arguments.  ?php\nclass RoboFile extends \\Robo\\Tasks\n{\n    function hello($world)\n    {\n        $this- say( Hello, $world );\n    }\n}\n?   When we run:  robo hello davert\n\u279c Hello, davert  Method names should be camelCased. In CLI  camelCased  method will be available as  camel:cased  command. longCamelCased  method will be transformed to  long:camel-cased  command.", 
            "title": "Commands"
        }, 
        {
            "location": "/getting-started/#arguments", 
            "text": "All method parameters without default values are treated as required arguments. In our example command  hello  requires one argument.\nIf you pass a default value to parameter the argument becomes optional:  ?php\n    function hello($world = 'world')\n    {\n        $this- say( Hello, $world );\n    }\n?   robo hello\n\u279c Hello, world  To accept multiple, variable arguments, define a parameter as an  array ; Robo will then pass all CLI arguments in this variable:  ?php\n    function hello(array $world)\n    {\n        $this- say( Hello,   . implode(', ', $world));\n    }\n?   robo hello davert jon bill bob\n\u279c Hello, davert, jon, bill, bob", 
            "title": "Arguments"
        }, 
        {
            "location": "/getting-started/#options", 
            "text": "To define command options you should define the last method parameter as an associative array where the keys define the option names and the values provide each option's default values:  ?php\n    function hello($opts = ['silent' =  false])\n    {\n        if (!$opts['silent']) $this- say( Hello, world );\n    }\n?   robo hello\n\u279c Hello, world\n\nrobo hello --silent  A one-character shortcut can be specified for option:  ?php\n    function hello($opts = ['silent|s' =  false])\n    {\n        if (!$opts['silent']) $this- say( Hello, world );\n    }\n?   Now command can be executed with '-s' to run in silent mode:   robo hello -s", 
            "title": "Options"
        }, 
        {
            "location": "/getting-started/#load-from-other-directories", 
            "text": "Robo can execute commands from a RoboFile located in different directory.\nYou can specify the path to another RoboFile by including the  --load-from  option:  robo run --load-from /path/to/my/other/project", 
            "title": "Load From Other Directories"
        }, 
        {
            "location": "/getting-started/#pass-through-arguments", 
            "text": "Sometimes you need to pass arguments from your command into a task. A command line after the  --  characters is treated as one argument.\nAny special character like  -  will be passed into without change.  ?php\n    function ls($args)\n    {\n        $this- taskExec('ls')- args($args)- run();\n    }\n?   robo ls -- Robo -c --all\n [Robo\\Task\\ExecTask] running ls Robo -c --all\n .  ..  CHANGELOG.md  codeception.yml  composer.json  composer.lock  docs  .git  .gitignore  .idea  LICENSE  README.md  robo  RoboFile.php  robo.phar  src  tests  .travis.yml  vendor", 
            "title": "Pass-Through Arguments"
        }, 
        {
            "location": "/getting-started/#help", 
            "text": "The help text for a command in a RoboFile may be provided in Doc-Block comments. An example help Doc-Block comment is shown below:  ?php\n/**\n * Calculate the fibonacci sequence between two numbers.\n *\n * Graphic output will look like\n *     +----+---+-------------+\n *     |    |   |             |\n *     |    |-+-|             |\n *     |----+-+-+             |\n *     |        |             |\n *     |        |             |\n *     |        |             |\n *     +--------+-------------+\n *\n * @param int $start Number to start from\n * @param int $steps Number of steps to perform\n * @param array $opts\n * @option $graphic Display the sequence graphically using cube\n *                  representation\n */\npublic function fibonacci($start, $steps, $opts = ['graphic' =  false])\n{\n}\n?   The corresponding help text produced is:  robo fibonacci --help\nUsage:\n fibonacci [--graphic] start steps\n\nArguments:\n start                 Number to start from\n steps                 Number of steps to perform\n\nOptions:\n --graphic             Display the sequence graphically using cube representation\n\nHelp:\n Graphic output will look like\n     +----+---+-------------+\n     |    |   |             |\n     |    |-+-|             |\n     |----+-+-+             |\n     |        |             |\n     |        |             |\n     |        |             |\n     +--------+-------------+  Arguments and options are populated from annotations.  Initially added with  PR by @jonsa ; now provided by the  consolidation/annotated-command  project, which was factored out from Robo.", 
            "title": "Help"
        }, 
        {
            "location": "/getting-started/#ignored-methods", 
            "text": "Robo ignores any method of your RoboFile that begins with  get  or  set . These methods are presumed to be data accessors, not commands.  To implement a command whose name contains  get  or  set , use the  @command  annotation.  ?php\n    /**\n     * @command set-alignment\n     */\n    function setAlignment($value)\n    {\n        ...\n    }\n?", 
            "title": "Ignored methods"
        }, 
        {
            "location": "/getting-started/#tasks", 
            "text": "Robo commands typically divide the work they need to accomplish into  tasks . The command first determines what needs to be done, inspecting current state if necessary, and then sets up and executes one or more tasks that make the actual changes needed by the command.  (See also the documentation on  Collections , which allow you to combine groups of tasks which can provide rollback functions to recover from failure situations.)  The convention used to add new tasks for use in your RoboFiles is to create a wrapper trait that instantiates the implementation class for each task. Each task method in the trait should start with the prefix  task , and should use  chained method calls  for configuration. Task execution should be triggered by the method  run .   It is recommended to have store your trait loading task in a  loadTasks  file in the same namespace as the task implementation.  A very basic task is shown below.  The namespace is  MyAssetTasks , and the example task is  CompileAssets . To customize to your purposes, choose an appropriate namespace, and then define as many tasks as you need.  ?php\nnamespace MyAssetTasks;\n\ntrait loadTasks\n{\n    /**\n     * Example task to compile assets\n     *\n     * @param string $pathToCompileAssets\n     * @return \\MyAssetTasks\\CompileAssets\n     */\n    protected function taskCompileAssets($path = null)\n    {\n        // Always construct your tasks with the `task()` task builder.\n        return $this- task(CompileAssets::class, $path);\n    }\n}\n\nclass CompileAssets implements \\Robo\\Contract\\TaskInterface\n{\n    // configuration params\n    protected $path;\n    protected $to;\n    function __construct($path)\n    {\n        $this- path = $path;\n    }\n\n    function to($filename)\n    {\n        $this- to = $filename;\n        // must return $this\n        return $this;\n    }\n\n    // must implement Run\n    function run()\n    {\n        //....\n    }\n}\n?   To use it in a RoboFile, include the task via its trait:  ?php\nclass RoboFile extends \\Robo\\Tasks\n{\n    use \\MyAssetTasks\\loadTasks;\n\n    public function build()\n    {\n        $this- taskCompileAssets('web/css-src')\n            - to('web/assets.min.css')\n            - run();\n    }\n}\n?   Robo\\Tasks includes all of the standard task traits by default, so a RoboFile may call the  $this- taskXXX  method for any of these tasks. To use an external task, ensure that its class files are available (e.g.  require  its project in your composer.json file), and include corresponding trait or traits in your Robofile.", 
            "title": "Tasks"
        }, 
        {
            "location": "/getting-started/#shortcuts", 
            "text": "Some tasks may have shortcuts. If a task does not require multi-step configuration, it can be executed with a single line:  ?php\n$this- _exec('ps aux');\n$this- _copy('config/env.example.yml','config/env.yml');\n?", 
            "title": "Shortcuts"
        }, 
        {
            "location": "/getting-started/#result", 
            "text": "Each task must return an instance of  Robo\\Result . A Robo Result contains the task instance, exit code, message, and any variable data that the task may wish to return.  The  run  method of  CompileAssets  class may look like this:  return new Robo\\Result($this, $exitCode,  Assets compiled );  or  return Robo\\Result::success($this,  Assets compiled );\nreturn Robo\\Result::error($this,  Failed to compile assets );  You can use this results to check if execution was successful, either using the  wasSuccessful()  method, or via the  invoke  shortcut. We will use the  Exec  task in next example to illustrate this:  ?php\nclass RoboFile\n{\n    use Robo\\Task\\Base\\loadShortcuts;\n\n    function test()\n    {\n        $res1 = $this- _exec('phpunit tests/integration');\n        $res2 = $this- _exec('phpunit tests/unit');\n\n        // print message when tests passed\n        if ($res1- wasSuccessful() and $res2- wasSuccessful()) $this- say( All tests passed );\n    }\n}\n?   Some tasks may also attach data to the Result object.  If this is done, the data may be accessed as an array; for example,  $result['path']; . This is not common.  Commands should return a Result object obtained from a task; this will ensure that the command exit code is set correctly.  If a command does not have a Result object available, then it may use a ResultData object.  ResultData objects are just like Result objects, except the do not contain a reference to a task.  return new Robo\\ResultData($exitcode, 'Error message.');  If the command returns a TaskInterface instead of a result, then the task will be executed, and the result from that task will be used as the final result of the command. See also  Formatters , below.", 
            "title": "Result"
        }, 
        {
            "location": "/getting-started/#stack", 
            "text": "Some tasks contain  Stack  in their name. These are called \"stack\" tasks, and they execute similar tasks one after the other.  Each of the primary methods in a stack class executes an operation.  Stack tasks also contain a  stopOnFail  method which can be used to stop task execution if one of its commands was unsuccessful.", 
            "title": "Stack"
        }, 
        {
            "location": "/getting-started/#global-stoponfail", 
            "text": "There is a global  stopOnFail  method as well, that can be used to stop a command on first failure of a task.  $this- stopOnFail(true);", 
            "title": "Global StopOnFail"
        }, 
        {
            "location": "/getting-started/#io", 
            "text": "As you noticed, you can print text via the  say  method, which is taken from the  Robo\\Output  trait.  $this- say( Hello );  Also, you can ask for input from console:  $name = $this- ask( What is your name? );  There are also  askDefault ,  askHidden , and  confirm  methods.  Inside tasks you should print process details with  printTaskInfo ,  `printTaskSuccess , and  printTaskError .  To allow tasks access IO, use the  Robo\\Common\\TaskIO  trait, or inherit your task class from  Robo\\Task\\BaseTask  (recommended).  $this- printTaskInfo('Processing...');  The Task IO methods send all output through a PSR-3 logger. Tasks should use task IO exclusively; methods such as 'say' and 'ask' should reside in the command method. This allows tasks to be usable in any context that has a PSR-3 logger, including background or server processes where it is not possible to directly query the user.", 
            "title": "IO"
        }, 
        {
            "location": "/getting-started/#formatters", 
            "text": "It is preferable for commands that look up and display information should avoid doing IO directly, and should instead return the data they wish to display as an array. This data can then be converted into different data formats, such as \"table\" and \"json\". The user may select which formatter to use via the --format option.", 
            "title": "Formatters"
        }, 
        {
            "location": "/getting-started/#progress", 
            "text": "Robo supports progress indicators via the Symfony ProgressBar class.  Long-running tasks that wish to display the progress indicator may do so via four simple steps:   Override the  progressIndicatorSteps()  method and return the number of \"steps\" in the operation.  Call  $this- startProgressIndicator()  to begin the progress indicator running.  Call  $this- advanceProgressIndicator()  a number of times equal to the result returned by  progressIndicatorSteps()  Call  $this- stopProgressIndicator()  when the operation is completed.   An example of this is shown below:  ?php\nclass MyTask extends BaseTask\n{\n    protected $steps = 10;\n\n    public function progressIndicatorSteps()\n    {\n        return $this- steps;\n    }\n\n    public function run()\n    {\n        $exitCode = 0;\n        $errorMessage =  ;\n\n        $this- startProgressIndicator();\n        for ($i = 0; $i   $this- steps; ++$i) {\n            $this- advanceProgressIndicator();\n        }\n        $this- stopProgressIndicator();\n\n        return new Result($this, $exitCode, $errorMessage, ['time' =  $this- getExecutionTime()]);\n    }\n}\n?   Tasks should not attempt to use a specific progress indicator (e.g. the Symfony ProgressBar class) directly, as the ProgressIndicatorAwareTrait allows for an appropriate progress indicator to be used (or omitted) as best suits the application.  Note that when using  Collections , the progress bar will automatically be shown if the collection takes longer than two seconds to run.  Each task in the collection will count for one \"step\"; if the task supports progress indicators as shown above, then it will add an additional number of steps as indicated by its  progressIndicatorSteps()  method.", 
            "title": "Progress"
        }, 
        {
            "location": "/collections/", 
            "text": "Collection Builders\n\n\nRobo provides task collections as a means of making error detection and recovery easier. When Robo tasks are added to a collection, their execution is deferred until the \n$collection-\nrun()\n method is called.  If one of the tasks fail, then the operation will be aborted; rollback tasks may also be defined to restore the system to its original condition.\n\n\nWhen using collections, a Robo script will go through three phases:\n\n\n\n\nDetermine which tasks will need to be run, and create a task builder.\n\n\nAssign values to variables.\n\n\nDo not alter the state of the system.\n\n\nCreate the necessary tasks via the task builder.\n\n\nUse variables calculated in the first phase in task parameters.\n\n\nRun the tasks via the \nrun()\n method.\n\n\nCheck and report errors once after \nrun()\n returns.\n\n\n\n\nFollowing this pattern will keep your code linear and easy to understand.\n\n\nCollections API\n\n\nCollections are made up of a combination of tasks and/or \ncallable\n functions / method pointers, such as:\n\n\n\n\nA task (implements TaskInterface)\n\n\nA function name (string)\n\n\nA closure (inline function)\n\n\nA method reference (array with object and method name)\n\n\n\n\nExamples of adding different kinds of tasks to a collection are provided below.\n\n\nTaskInterface Objects\n\n\n?php\n  $collection-\nadd(\n    $this-\ntaskExec('ls')\n  );\n?\n\n\n\n\n\nFunctions\n\n\n?php\n  $collection-\naddCode('mytaskfunction');\n?\n\n\n\n\n\nClosures\n\n\n?php\n  $collection-\naddCode(\n    function() use ($work)\n    {\n      // do something with $work      \n    });\n?\n\n\n\n\n\nMethods\n\n\n?php\n  $collection-\naddCode([$myobject, 'mymethod']);\n?\n\n\n\n\n\nUsing a Collection Builder\n\n\nTo manage a collection of tasks, a collection builder. Collection builders allow tasks to be created via chained methods.  All of the tasks created by the same builder are added to a collection; when the \nrun()\n method is called, all of the tasks in the collection run. \n\n\nThe 'publish' command from Robo's own RoboFile is shown below.  It uses a collection builder to run some git and filesystem operations. The \"completion\" tasks are run after all other tasks complete, or during rollback processing when an operation fails.\n\n\n?php\nclass RoboFile extends \\Robo\\Tasks\n{\n    public function publish()\n    {\n        $current_branch = exec('git rev-parse --abbrev-ref HEAD');\n\n        $collection = $this-\ncollectionBuilder();\n        $collection-\ntaskGitStack()\n            -\ncheckout('site')\n            -\nmerge('master')\n        -\ncompletion($this-\ntaskGitStack()-\ncheckout($current_branch))\n        -\ntaskFilesystemStack()\n            -\ncopy('CHANGELOG.md', 'docs/changelog.md')\n        -\ncompletion($this-\ntaskFilesystemStack()-\nremove('docs/changelog.md'))\n        -\ntaskExec('mkdocs gh-deploy');\n\n        return $collection;\n    }\n}\n?\n\n\n\n\n\nThe example above also adds a couple of tasks as \"completions\"; these are run when the collection completes execution, as explained below.\n\n\nRollbacks and Completions\n\n\nRobo also provides rollbacks and completions, special tasks that are eligible to run only if all of the tasks added to the collection before them succeed. The section below explains the circumstances under which these tasks will run.\n\n\nCompletion Tasks\n\n\nCompletions run whenever their collection completes or fails, but only if all of the tasks that come before it succeed. An example of this is shown in the first example above. A filesystem stack task copies CHANDELOG.md to docs/changelog.md; after this task is added to the collection, another filesystem stack task is added as a completion to delete docs/changelog.md. This is done because docs/changelog.md is only intended to exist long enough to be used by the \nmkdocs\n task, which is added later. \n\n\nRollback Tasks\n\n\nIn addition to completions, Robo also supports rollbacks. Rollback tasks can be used to clean up after failures, so the state of the system does not change when execution is interrupted by an error. A rollback task is executed if all of the tasks that come before it succeed, and at least one of the tasks that come after it fails.  If all tasks succeed, then no rollback tasks are executed.\n\n\nRollback and Completion Methods\n\n\nAny task may also implement \\Robo\\Contract\\RollbackInterface; if this is done, then its \nrollback()\n method will be called if the task is \nrun()\n on a collection that later fails.\n\n\nUse \naddAsCompletion($collection)\n in place of \naddAsRollback($collection)\n, or implement \\Robo\\Contract\\CompletionInterface. Completions otherwise work exactly like rollbacks.\n\n\nTemporary Objects\n\n\nSince the concept of temporary objects that are cleaned up  on failure is a common pattern, Robo provides built-in support for them. Temporary directories and files are provided out of the box; other kinds of temporary objects can be easily created using the Temporary global collection.\n\n\nTemporary Directories\n\n\nIt is recommended that operations that perform multiple filesystem operations should, whenever possible, do most of their work in a temporary directory. Temporary directories are created by \n$this-\ntaskTmpDir()\n, and are automatically be removed when the collection completes or rolls back. As an added convenience, the CollectionBuilder class has a \ntmpDir()\n method that creates a temporary directory via \ntaskTmpDir()\n, and then returns the path to the temporary directory.\n\n\n?php\nclass RoboFile extends \\Robo\\Tasks\n{\n    function myOperation()\n    {\n        $collection = $this-\ncollectionBuilder();\n\n        // Create a temporary directory, and fetch its path.\n        $work = $collection-\ntmpDir();\n\n        $collection\n          -\ntaskWriteToFile(\n$work/README.md\n)\n            -\nline('-----')\n            -\nline(date('Y-m-d').' Generated file: do not edit.')\n            -\nline('----');\n\n        // If all of the preceding tasks succeed, then rename the temporary \n        // directory to its final name.\n        $collection-\ntaskFilesystemStack()\n          -\nrename($work, 'destination');\n\n        return $collection-\nrun();\n    }\n}\n?\n\n\n\n\n\nIn the previous example, the path to the temporary directory is stored in the variable \n$work\n, and is passed as needed to the parameters of the other tasks as they are added to the collection. After the task collection is run, the temporary directory will be automatically deleted. In the example above, the temporary directory is renamed by the last task in the collection. This allows the working directory to persist; the collection will still attempt to remove the working directory, but no errors will be thrown if it no longer exists in its original location. Following this pattern allows Robo scripts to easily and safely do work that cleans up after itself on failure, without introducing a lot of branching or additional error recovery code.  This paradigm is common enough to warrant a shortcut method of accomplishing the same thing.  The example below is identical to the one above, save for the fact that it uses the \nworkDir()\n method instead of \ntmpDir()\n.  \nworkDir()\n renames the temporary directory to its final name if the collection completes; any directory that exists in the same location will be overwritten at that time, but will persist if the collection roles back.\n\n\n?php\nclass RoboFile extends \\Robo\\Tasks\n{\n    function myOperation()\n    {\n        $collection = $this-\ncollectionBuilder();\n\n        // Create a temporary directory, and fetch its path.\n        // If all of the tasks succeed, then rename the temporary directory\n        // to its final name.\n        $work = $collection-\nworkDir('destination');\n\n        $collection\n          -\ntaskWriteToFile(\n$work/README.md\n)\n            -\nline('-----')\n            -\nline(date('Y-m-d').' Generated file: do not edit.')\n            -\nline('----');\n\n        return $collection-\nrun();\n    }\n}\n?\n\n\n\n\n\nTemporary directories may also be created via the shortcut \n$this-\n_tmpDir();\n. Temporary directories created in this way are deleted when the script terminates.\n\n\nTemporary Files\n\n\nRobo also provides an API for creating temporary files. They may be created via \n$this-\ntaskTmpFile()\n; they are used exactly like \n$this-\ntaskWrite()\n, except they are given a random name on creation, and are deleted when their collection completes.  If they are not added to a collection, then they are deleted when the script terminates.\n\n\nThe Temporary Global Collection\n\n\nRobo maintains a special collection called the Temporary global collection. This collection is used to keep track of temporary objects that are not part of any collection. For example, Robo temporary directories and temporary files are managed by the Temporary global collection. These temporary objects are cleaned up automatically when the script terminates.\n\n\nIt is easy to create your own temporary tasks that behave in the same way as the provided temporary directory and temporary file tasks. There are two steps required:\n\n\n\n\nImplement \\Robo\\Contract\\CompletionInterface\n\n\nWrap the task via Temporary::wrap()\n\n\n\n\nFor example, the implementation of taskTmpFile() looks like this:\n\n\n?php\n    protected function taskTmpFile($filename = 'tmp', $extension = '', $baseDir = '', $includeRandomPart = true)\n    {\n        return Temporary::wrap(new TmpFile($filename, $extension, $baseDir, $includeRandomPart));\n    }\n?\n\n\n\n\n\nThe \ncomplete()\n method of the task will be called once the Collection the temporary object is attached to finishes running. If the temporary is not added to a collection, then its \ncomplete()\n method will be called when the script terminates.\n\n\nNamed Tasks\n\n\nIt is also possible to provide names for the tasks added to a collection. This has two primary benefits:\n\n\n\n\nAny result data returned from a named task is stored in the Result object under the task name.\n\n\nIt is possible for other code to add more tasks before or after any named task.\n\n\n\n\nThis feature is useful if you have functions that create task collections, and return them as a function results. The original caller can then use the \n$collection-\nbefore()\n or \n$collection-\nafter()\n to insert sequenced tasks into the set of operations to be performed. One reason this might be done would be to define a base set of operations to perform (e.g. in a deploy), and then apply modifications for other environments (e.g. dev or stage).\n\n\n?php\n  $collection-\naddCode(\n    function() use ($work)\n    {\n      // do something with $work      \n    },\n    \ntaskname\n);\n?\n\n\n\n\n\nGiven a collection with named tasks, it is possible to insert more tasks before or after a task of a given name.\n\n\n?php\n  $collection-\nafter(\ntaskname\n,\n    function() use ($work)\n    {\n      // do something with $work after \ntaskname\n executes, if it succeeds.    \n    });\n?\n\n\n\n\n\n?php\n  $collection-\nbefore(\ntaskname\n,\n    function() use ($work)\n    {\n      // do something with $work before \ntaskname\n executes.    \n    });\n?\n\n\n\n\n\nIt is recommended that named tasks be avoided unless specifically needed.", 
            "title": "Collections"
        }, 
        {
            "location": "/collections/#collection-builders", 
            "text": "Robo provides task collections as a means of making error detection and recovery easier. When Robo tasks are added to a collection, their execution is deferred until the  $collection- run()  method is called.  If one of the tasks fail, then the operation will be aborted; rollback tasks may also be defined to restore the system to its original condition.  When using collections, a Robo script will go through three phases:   Determine which tasks will need to be run, and create a task builder.  Assign values to variables.  Do not alter the state of the system.  Create the necessary tasks via the task builder.  Use variables calculated in the first phase in task parameters.  Run the tasks via the  run()  method.  Check and report errors once after  run()  returns.   Following this pattern will keep your code linear and easy to understand.", 
            "title": "Collection Builders"
        }, 
        {
            "location": "/collections/#collections-api", 
            "text": "Collections are made up of a combination of tasks and/or  callable  functions / method pointers, such as:   A task (implements TaskInterface)  A function name (string)  A closure (inline function)  A method reference (array with object and method name)   Examples of adding different kinds of tasks to a collection are provided below.", 
            "title": "Collections API"
        }, 
        {
            "location": "/collections/#taskinterface-objects", 
            "text": "?php\n  $collection- add(\n    $this- taskExec('ls')\n  );\n?", 
            "title": "TaskInterface Objects"
        }, 
        {
            "location": "/collections/#functions", 
            "text": "?php\n  $collection- addCode('mytaskfunction');\n?", 
            "title": "Functions"
        }, 
        {
            "location": "/collections/#closures", 
            "text": "?php\n  $collection- addCode(\n    function() use ($work)\n    {\n      // do something with $work      \n    });\n?", 
            "title": "Closures"
        }, 
        {
            "location": "/collections/#methods", 
            "text": "?php\n  $collection- addCode([$myobject, 'mymethod']);\n?", 
            "title": "Methods"
        }, 
        {
            "location": "/collections/#using-a-collection-builder", 
            "text": "To manage a collection of tasks, a collection builder. Collection builders allow tasks to be created via chained methods.  All of the tasks created by the same builder are added to a collection; when the  run()  method is called, all of the tasks in the collection run.   The 'publish' command from Robo's own RoboFile is shown below.  It uses a collection builder to run some git and filesystem operations. The \"completion\" tasks are run after all other tasks complete, or during rollback processing when an operation fails.  ?php\nclass RoboFile extends \\Robo\\Tasks\n{\n    public function publish()\n    {\n        $current_branch = exec('git rev-parse --abbrev-ref HEAD');\n\n        $collection = $this- collectionBuilder();\n        $collection- taskGitStack()\n            - checkout('site')\n            - merge('master')\n        - completion($this- taskGitStack()- checkout($current_branch))\n        - taskFilesystemStack()\n            - copy('CHANGELOG.md', 'docs/changelog.md')\n        - completion($this- taskFilesystemStack()- remove('docs/changelog.md'))\n        - taskExec('mkdocs gh-deploy');\n\n        return $collection;\n    }\n}\n?   The example above also adds a couple of tasks as \"completions\"; these are run when the collection completes execution, as explained below.", 
            "title": "Using a Collection Builder"
        }, 
        {
            "location": "/collections/#rollbacks-and-completions", 
            "text": "Robo also provides rollbacks and completions, special tasks that are eligible to run only if all of the tasks added to the collection before them succeed. The section below explains the circumstances under which these tasks will run.", 
            "title": "Rollbacks and Completions"
        }, 
        {
            "location": "/collections/#completion-tasks", 
            "text": "Completions run whenever their collection completes or fails, but only if all of the tasks that come before it succeed. An example of this is shown in the first example above. A filesystem stack task copies CHANDELOG.md to docs/changelog.md; after this task is added to the collection, another filesystem stack task is added as a completion to delete docs/changelog.md. This is done because docs/changelog.md is only intended to exist long enough to be used by the  mkdocs  task, which is added later.", 
            "title": "Completion Tasks"
        }, 
        {
            "location": "/collections/#rollback-tasks", 
            "text": "In addition to completions, Robo also supports rollbacks. Rollback tasks can be used to clean up after failures, so the state of the system does not change when execution is interrupted by an error. A rollback task is executed if all of the tasks that come before it succeed, and at least one of the tasks that come after it fails.  If all tasks succeed, then no rollback tasks are executed.", 
            "title": "Rollback Tasks"
        }, 
        {
            "location": "/collections/#rollback-and-completion-methods", 
            "text": "Any task may also implement \\Robo\\Contract\\RollbackInterface; if this is done, then its  rollback()  method will be called if the task is  run()  on a collection that later fails.  Use  addAsCompletion($collection)  in place of  addAsRollback($collection) , or implement \\Robo\\Contract\\CompletionInterface. Completions otherwise work exactly like rollbacks.", 
            "title": "Rollback and Completion Methods"
        }, 
        {
            "location": "/collections/#temporary-objects", 
            "text": "Since the concept of temporary objects that are cleaned up  on failure is a common pattern, Robo provides built-in support for them. Temporary directories and files are provided out of the box; other kinds of temporary objects can be easily created using the Temporary global collection.", 
            "title": "Temporary Objects"
        }, 
        {
            "location": "/collections/#temporary-directories", 
            "text": "It is recommended that operations that perform multiple filesystem operations should, whenever possible, do most of their work in a temporary directory. Temporary directories are created by  $this- taskTmpDir() , and are automatically be removed when the collection completes or rolls back. As an added convenience, the CollectionBuilder class has a  tmpDir()  method that creates a temporary directory via  taskTmpDir() , and then returns the path to the temporary directory.  ?php\nclass RoboFile extends \\Robo\\Tasks\n{\n    function myOperation()\n    {\n        $collection = $this- collectionBuilder();\n\n        // Create a temporary directory, and fetch its path.\n        $work = $collection- tmpDir();\n\n        $collection\n          - taskWriteToFile( $work/README.md )\n            - line('-----')\n            - line(date('Y-m-d').' Generated file: do not edit.')\n            - line('----');\n\n        // If all of the preceding tasks succeed, then rename the temporary \n        // directory to its final name.\n        $collection- taskFilesystemStack()\n          - rename($work, 'destination');\n\n        return $collection- run();\n    }\n}\n?   In the previous example, the path to the temporary directory is stored in the variable  $work , and is passed as needed to the parameters of the other tasks as they are added to the collection. After the task collection is run, the temporary directory will be automatically deleted. In the example above, the temporary directory is renamed by the last task in the collection. This allows the working directory to persist; the collection will still attempt to remove the working directory, but no errors will be thrown if it no longer exists in its original location. Following this pattern allows Robo scripts to easily and safely do work that cleans up after itself on failure, without introducing a lot of branching or additional error recovery code.  This paradigm is common enough to warrant a shortcut method of accomplishing the same thing.  The example below is identical to the one above, save for the fact that it uses the  workDir()  method instead of  tmpDir() .   workDir()  renames the temporary directory to its final name if the collection completes; any directory that exists in the same location will be overwritten at that time, but will persist if the collection roles back.  ?php\nclass RoboFile extends \\Robo\\Tasks\n{\n    function myOperation()\n    {\n        $collection = $this- collectionBuilder();\n\n        // Create a temporary directory, and fetch its path.\n        // If all of the tasks succeed, then rename the temporary directory\n        // to its final name.\n        $work = $collection- workDir('destination');\n\n        $collection\n          - taskWriteToFile( $work/README.md )\n            - line('-----')\n            - line(date('Y-m-d').' Generated file: do not edit.')\n            - line('----');\n\n        return $collection- run();\n    }\n}\n?   Temporary directories may also be created via the shortcut  $this- _tmpDir(); . Temporary directories created in this way are deleted when the script terminates.", 
            "title": "Temporary Directories"
        }, 
        {
            "location": "/collections/#temporary-files", 
            "text": "Robo also provides an API for creating temporary files. They may be created via  $this- taskTmpFile() ; they are used exactly like  $this- taskWrite() , except they are given a random name on creation, and are deleted when their collection completes.  If they are not added to a collection, then they are deleted when the script terminates.", 
            "title": "Temporary Files"
        }, 
        {
            "location": "/collections/#the-temporary-global-collection", 
            "text": "Robo maintains a special collection called the Temporary global collection. This collection is used to keep track of temporary objects that are not part of any collection. For example, Robo temporary directories and temporary files are managed by the Temporary global collection. These temporary objects are cleaned up automatically when the script terminates.  It is easy to create your own temporary tasks that behave in the same way as the provided temporary directory and temporary file tasks. There are two steps required:   Implement \\Robo\\Contract\\CompletionInterface  Wrap the task via Temporary::wrap()   For example, the implementation of taskTmpFile() looks like this:  ?php\n    protected function taskTmpFile($filename = 'tmp', $extension = '', $baseDir = '', $includeRandomPart = true)\n    {\n        return Temporary::wrap(new TmpFile($filename, $extension, $baseDir, $includeRandomPart));\n    }\n?   The  complete()  method of the task will be called once the Collection the temporary object is attached to finishes running. If the temporary is not added to a collection, then its  complete()  method will be called when the script terminates.", 
            "title": "The Temporary Global Collection"
        }, 
        {
            "location": "/collections/#named-tasks", 
            "text": "It is also possible to provide names for the tasks added to a collection. This has two primary benefits:   Any result data returned from a named task is stored in the Result object under the task name.  It is possible for other code to add more tasks before or after any named task.   This feature is useful if you have functions that create task collections, and return them as a function results. The original caller can then use the  $collection- before()  or  $collection- after()  to insert sequenced tasks into the set of operations to be performed. One reason this might be done would be to define a base set of operations to perform (e.g. in a deploy), and then apply modifications for other environments (e.g. dev or stage).  ?php\n  $collection- addCode(\n    function() use ($work)\n    {\n      // do something with $work      \n    },\n     taskname );\n?   Given a collection with named tasks, it is possible to insert more tasks before or after a task of a given name.  ?php\n  $collection- after( taskname ,\n    function() use ($work)\n    {\n      // do something with $work after  taskname  executes, if it succeeds.    \n    });\n?   ?php\n  $collection- before( taskname ,\n    function() use ($work)\n    {\n      // do something with $work before  taskname  executes.    \n    });\n?   It is recommended that named tasks be avoided unless specifically needed.", 
            "title": "Named Tasks"
        }, 
        {
            "location": "/tasks/ApiGen/", 
            "text": "ApiGen Tasks\n\n\nApiGen\n\n\nExecutes ApiGen command to generate documentation\n\n\n?php\n// ApiGen Command\n$this-\ntaskApiGen('./apigen.neon')\n     -\ntemplateConfig('vendor/apigen/apigen/templates/bootstrap/config.neon')\n     -\nwipeout(true)\n      -\nrun();\n?\n\n\n\n\n\n\n\nconfig($config)\n \n\n\nsource($src)\n   * \nparam array|string|Traversable\n $src one or more source values\n\n\ndestination($dest)\n \n\n\nextensions($exts)\n   * \nparam array|string\n $exts one or more extensions\n\n\nexclude($exclude)\n   * \nparam array|string\n $exclude one or more exclusions\n\n\nskipDocPath($path)\n   * \nparam array|string|Traversable\n $path one or more skip-doc-path values\n\n\nskipDocPrefix($prefix)\n   * \nparam array|string|Traversable\n $prefix one or more skip-doc-prefix values\n\n\ncharset($charset)\n   * \nparam array|string\n $charset one or more charsets\n\n\nmainProjectNamePrefix($name)\n \n\n\ntitle($title)\n \n\n\nbaseUrl($baseUrl)\n \n\n\ngoogleCseId($id)\n \n\n\ngoogleAnalytics($trackingCode)\n \n\n\ntemplateConfig($templateConfig)\n \n\n\nallowedHtml($tags)\n   * \nparam array|string\n $tags one or more supported html tags\n\n\ngroups($groups)\n \n\n\nautocomplete($types)\n   * \nparam array|string\n $types or more supported autocomplete types\n\n\naccessLevels($levels)\n   * \nparam array|string\n $levels one or more access levels\n\n\ninternal($internal)\n   * \nparam boolean|string\n $internal 'yes' or true if internal, 'no' or false if not\n\n\nphp($php)\n   * \nparam boolean|string\n $php 'yes' or true to generate documentation for internal php classes,\n\n\ntree($tree)\n   * \nparam boolean|string\n $tree 'yes' or true to generate a tree view of classes, 'no' or false otherwise\n\n\ndeprecated($dep)\n   * \nparam boolean|string\n $dep 'yes' or true to generate documentation for deprecated classes, 'no' or false otherwise\n\n\ntodo($todo)\n   * \nparam boolean|string\n $todo 'yes' or true to document tasks, 'no' or false otherwise\n\n\nsourceCode($src)\n   * \nparam boolean|string\n $src 'yes' or true to generate highlighted source code, 'no' or false otherwise\n\n\ndownload($zipped)\n   * \nparam boolean|string\n $zipped 'yes' or true to generate downloadable documentation, 'no' or false otherwise\n\n\nreport($path)\n \n\n\nwipeout($wipeout)\n   * \nparam boolean|string\n $wipeout 'yes' or true to clear out the destination directory, 'no' or false otherwise\n\n\nquiet($quiet)\n   * \nparam boolean|string\n $quiet 'yes' or true for quiet, 'no' or false otherwise\n\n\nprogressbar($bar)\n   * \nparam boolean|string\n $bar 'yes' or true to display a progress bar, 'no' or false otherwise\n\n\ncolors($colors)\n   * \nparam boolean|string\n $colors 'yes' or true colorize the output, 'no' or false otherwise\n\n\nupdateCheck($check)\n   * \nparam boolean|string\n $check 'yes' or true to check for updates, 'no' or false otherwise\n\n\ndebug($debug)\n   * \nparam boolean|string\n $debug 'yes' or true to enable debug mode, 'no' or false otherwise\n\n\ndir($dir)\n  changes working directory of command\n\n\nprinted($arg)\n  Should command output be printed\n\n\narg($arg)\n  Pass argument to executable\n\n\nargs($args)\n  Pass methods parameters as arguments to executable\n\n\noption($option, $value = null)\n  Pass option to executable. Options are prefixed with \n--\n , value can be provided in second parameter.\n\n\noptionList($option, $value = null)\n  Pass multiple options to executable. Value can be a string or array.", 
            "title": "ApiGen Tasks"
        }, 
        {
            "location": "/tasks/ApiGen/#apigen-tasks", 
            "text": "", 
            "title": "ApiGen Tasks"
        }, 
        {
            "location": "/tasks/ApiGen/#apigen", 
            "text": "Executes ApiGen command to generate documentation  ?php\n// ApiGen Command\n$this- taskApiGen('./apigen.neon')\n     - templateConfig('vendor/apigen/apigen/templates/bootstrap/config.neon')\n     - wipeout(true)\n      - run();\n?    config($config)    source($src)    *  param array|string|Traversable  $src one or more source values  destination($dest)    extensions($exts)    *  param array|string  $exts one or more extensions  exclude($exclude)    *  param array|string  $exclude one or more exclusions  skipDocPath($path)    *  param array|string|Traversable  $path one or more skip-doc-path values  skipDocPrefix($prefix)    *  param array|string|Traversable  $prefix one or more skip-doc-prefix values  charset($charset)    *  param array|string  $charset one or more charsets  mainProjectNamePrefix($name)    title($title)    baseUrl($baseUrl)    googleCseId($id)    googleAnalytics($trackingCode)    templateConfig($templateConfig)    allowedHtml($tags)    *  param array|string  $tags one or more supported html tags  groups($groups)    autocomplete($types)    *  param array|string  $types or more supported autocomplete types  accessLevels($levels)    *  param array|string  $levels one or more access levels  internal($internal)    *  param boolean|string  $internal 'yes' or true if internal, 'no' or false if not  php($php)    *  param boolean|string  $php 'yes' or true to generate documentation for internal php classes,  tree($tree)    *  param boolean|string  $tree 'yes' or true to generate a tree view of classes, 'no' or false otherwise  deprecated($dep)    *  param boolean|string  $dep 'yes' or true to generate documentation for deprecated classes, 'no' or false otherwise  todo($todo)    *  param boolean|string  $todo 'yes' or true to document tasks, 'no' or false otherwise  sourceCode($src)    *  param boolean|string  $src 'yes' or true to generate highlighted source code, 'no' or false otherwise  download($zipped)    *  param boolean|string  $zipped 'yes' or true to generate downloadable documentation, 'no' or false otherwise  report($path)    wipeout($wipeout)    *  param boolean|string  $wipeout 'yes' or true to clear out the destination directory, 'no' or false otherwise  quiet($quiet)    *  param boolean|string  $quiet 'yes' or true for quiet, 'no' or false otherwise  progressbar($bar)    *  param boolean|string  $bar 'yes' or true to display a progress bar, 'no' or false otherwise  colors($colors)    *  param boolean|string  $colors 'yes' or true colorize the output, 'no' or false otherwise  updateCheck($check)    *  param boolean|string  $check 'yes' or true to check for updates, 'no' or false otherwise  debug($debug)    *  param boolean|string  $debug 'yes' or true to enable debug mode, 'no' or false otherwise  dir($dir)   changes working directory of command  printed($arg)   Should command output be printed  arg($arg)   Pass argument to executable  args($args)   Pass methods parameters as arguments to executable  option($option, $value = null)   Pass option to executable. Options are prefixed with  --  , value can be provided in second parameter.  optionList($option, $value = null)   Pass multiple options to executable. Value can be a string or array.", 
            "title": "ApiGen"
        }, 
        {
            "location": "/tasks/Archive/", 
            "text": "Archive Tasks\n\n\nExtract\n\n\nExtracts an archive.\n\n\nNote that often, distributions are packaged in tar or zip archives\nwhere the topmost folder may contain variable information, such as\nthe release date, or the version of the package.  This information\nis very useful when unpacking by hand, but arbitrarily-named directories\nare much less useful to scripts.  Therefore, by default, Extract will\nremove the top-level directory, and instead store all extracted files\ninto the directory specified by $archivePath.\n\n\nTo keep the top-level directory when extracting, use\n\npreserveTopDirectory(true)\n.\n\n\n?php\n$this-\ntaskExtract($archivePath)\n -\nto($destination)\n -\npreserveTopDirectory(false) // the default\n -\nrun();\n?\n\n\n\n\n\n\n\n\n\nto(string)\n  location to store extracted files\n\n\n\n\n\n\nto($to)\n \n\n\n\n\npreserveTopDirectory($preserve = null)\n \n\n\n\n\nPack\n\n\nCreates a zip or tar archive.\n\n\n?php\n$this-\ntaskPack(\n\narchiveFile\n)\n-\nadd('README')                         // Puts file 'README' in archive at the root\n-\nadd('project')                        // Puts entire contents of directory 'project' in archinve inside 'project'\n-\naddFile('dir/file.txt', 'file.txt')   // Takes 'file.txt' from cwd and puts it in archive inside 'dir'.\n-\nrun();\n?\n\n\n\n\n\n\n\narchiveFile($archiveFile)\n \n\n\naddFile($placementLocation, $filesystemLocation)\n  Add an item to the archive. Like file_exists(), the parameter\n\n\naddDir($placementLocation, $filesystemLocation)\n  Alias for addFile, in case anyone has angst about using\n\n\nadd($item)\n  Add a file or directory, or list of same to the archive.", 
            "title": "Archive Tasks"
        }, 
        {
            "location": "/tasks/Archive/#archive-tasks", 
            "text": "", 
            "title": "Archive Tasks"
        }, 
        {
            "location": "/tasks/Archive/#extract", 
            "text": "Extracts an archive.  Note that often, distributions are packaged in tar or zip archives\nwhere the topmost folder may contain variable information, such as\nthe release date, or the version of the package.  This information\nis very useful when unpacking by hand, but arbitrarily-named directories\nare much less useful to scripts.  Therefore, by default, Extract will\nremove the top-level directory, and instead store all extracted files\ninto the directory specified by $archivePath.  To keep the top-level directory when extracting, use preserveTopDirectory(true) .  ?php\n$this- taskExtract($archivePath)\n - to($destination)\n - preserveTopDirectory(false) // the default\n - run();\n?     to(string)   location to store extracted files    to($to)     preserveTopDirectory($preserve = null)", 
            "title": "Extract"
        }, 
        {
            "location": "/tasks/Archive/#pack", 
            "text": "Creates a zip or tar archive.  ?php\n$this- taskPack( archiveFile )\n- add('README')                         // Puts file 'README' in archive at the root\n- add('project')                        // Puts entire contents of directory 'project' in archinve inside 'project'\n- addFile('dir/file.txt', 'file.txt')   // Takes 'file.txt' from cwd and puts it in archive inside 'dir'.\n- run();\n?    archiveFile($archiveFile)    addFile($placementLocation, $filesystemLocation)   Add an item to the archive. Like file_exists(), the parameter  addDir($placementLocation, $filesystemLocation)   Alias for addFile, in case anyone has angst about using  add($item)   Add a file or directory, or list of same to the archive.", 
            "title": "Pack"
        }, 
        {
            "location": "/tasks/Assets/", 
            "text": "Assets Tasks\n\n\nImageMinify\n\n\nMinifies images. When the required minifier is not installed on the system\nthe task will try to download it from the \nimagemin\n repository.\n\n\nWhen the task is run without any specified minifier it will compress the images\nbased on the extension.\n\n\n$this-\ntaskImageMinify('assets/images/*')\n    -\nto('dist/images/')\n    -\nrun();\n\n\n\n\nThis will use the following minifiers:\n\n\n\n\nPNG: optipng\n\n\nGIF: gifsicle\n\n\nJPG, JPEG: jpegtran\n\n\nSVG: svgo\n\n\n\n\nWhen the minifier is specified the task will use that for all the input files. In that case\nit is useful to filter the files with the extension:\n\n\n$this-\ntaskImageMinify('assets/images/*.png')\n    -\nto('dist/images/')\n    -\nminifier('pngcrush');\n    -\nrun();\n\n\n\n\nThe task supports the following minifiers:\n\n\n\n\noptipng\n\n\npngquant\n\n\nadvpng\n\n\npngout\n\n\nzopflipng\n\n\npngcrush\n\n\ngifsicle\n\n\njpegoptim\n\n\njpeg-recompress\n\n\njpegtran\n\n\nsvgo (only minification, no downloading)\n\n\n\n\nYou can also specifiy extra options for the minifiers:\n\n\n$this-\ntaskImageMinify('assets/images/*.jpg')\n    -\nto('dist/images/')\n    -\nminifier('jpegtran', ['-progressive' =\n null, '-copy' =\n 'none'])\n    -\nrun();\n\n\n\n\nThis will execute as:\n\njpegtran -copy none -progressive -optimize -outfile \"dist/images/test.jpg\" \"/var/www/test/assets/images/test.jpg\"\n\n\n\n\nto($target)\n  Sets the target directory where the files will be copied to.\n\n\nminifier($minifier, array $options = Array ( ) )\n  Sets the minifier.\n\n\n\n\nLess\n\n\nCompiles less files.\n\n\n?php\n$this-\ntaskLess([\n    'less/default.less' =\n 'css/default.css'\n])\n-\nrun();\n?\n\n\n\n\n\nUse one of both less compilers in your project:\n\n\nleafo/lessphp\n: \n~0.5\n,\n\noyejorge/less.php\n: \n~1.5\n\n\n\n\n\nSpecify directory (string or array) for less imports lookup:\n\n\n?php\n$this-\ntaskLess([\n    'less/default.less' =\n 'css/default.css'\n])\n-\nimportDir('less')\n-\ncompiler('lessphp')\n-\nrun();\n?\n\n\n\n\n\nYou can implement additional compilers by extending this task and adding a\nmethod named after them and overloading the lessCompilers() method to\ninject the name there.\n\n\n\n\nimportDir($dirs)\n  Sets import directories\n\n\naddImportPath($dir)\n  Adds import directory\n\n\nsetImportPaths($dirs)\n  Sets import directories\n\n\nsetFormatter($formatterName)\n   * \nparam string\n $formatterName\n\n\ncompiler($compiler, array $options = Array ( ) )\n  Sets the compiler.\n\n\n\n\nMinify\n\n\nMinifies asset file (CSS or JS).\n\n\n?php\n$this-\ntaskMinify( 'web/assets/theme.css' )\n     -\nrun()\n?\n\n\n\n\n\nPlease install additional dependencies to use:\n\n\npatchwork/jsqueeze\n: \n~1.0\n,\n\nnatxet/CssMin\n: \n~3.0\n\n\n\n\n\n\n\nto($dst)\n  Sets destination. Tries to guess type from it.\n\n\ntype($type)\n  Sets type with validation.\n\n\nsingleLine($singleLine)\n  Single line option for the JS minimisation.\n\n\nkeepImportantComments($keepImportantComments)\n  keepImportantComments option for the JS minimisation.\n\n\nspecialVarRx($specialVarRx)\n  specialVarRx option for the JS minimisation.\n\n\n__toString()\n  @return string\n\n\n\n\nScss\n\n\nCompiles scss files.\n\n\n?php\n$this-\ntaskScss([\n    'scss/default.scss' =\n 'css/default.css'\n])\n-\nimportDir('assets/styles')\n-\nrun();\n?\n\n\n\n\n\nUse the following scss compiler in your project:\n\n\nleafo/scssphp\n: \n~0.1\n,\n\n\n\n\nYou can implement additional compilers by extending this task and adding a\nmethod named after them and overloading the scssCompilers() method to\ninject the name there.\n\n\n\n\nsetFormatter($formatterName)\n  Sets the formatter for scssphp\n\n\nimportDir($dirs)\n  Sets import directories\n\n\naddImportPath($dir)\n  Adds import directory\n\n\nsetImportPaths($dirs)\n  Sets import directories\n\n\ncompiler($compiler, array $options = Array ( ) )\n  Sets the compiler.", 
            "title": "Assets Tasks"
        }, 
        {
            "location": "/tasks/Assets/#assets-tasks", 
            "text": "", 
            "title": "Assets Tasks"
        }, 
        {
            "location": "/tasks/Assets/#imageminify", 
            "text": "Minifies images. When the required minifier is not installed on the system\nthe task will try to download it from the  imagemin  repository.  When the task is run without any specified minifier it will compress the images\nbased on the extension.  $this- taskImageMinify('assets/images/*')\n    - to('dist/images/')\n    - run();  This will use the following minifiers:   PNG: optipng  GIF: gifsicle  JPG, JPEG: jpegtran  SVG: svgo   When the minifier is specified the task will use that for all the input files. In that case\nit is useful to filter the files with the extension:  $this- taskImageMinify('assets/images/*.png')\n    - to('dist/images/')\n    - minifier('pngcrush');\n    - run();  The task supports the following minifiers:   optipng  pngquant  advpng  pngout  zopflipng  pngcrush  gifsicle  jpegoptim  jpeg-recompress  jpegtran  svgo (only minification, no downloading)   You can also specifiy extra options for the minifiers:  $this- taskImageMinify('assets/images/*.jpg')\n    - to('dist/images/')\n    - minifier('jpegtran', ['-progressive' =  null, '-copy' =  'none'])\n    - run();  This will execute as: jpegtran -copy none -progressive -optimize -outfile \"dist/images/test.jpg\" \"/var/www/test/assets/images/test.jpg\"   to($target)   Sets the target directory where the files will be copied to.  minifier($minifier, array $options = Array ( ) )   Sets the minifier.", 
            "title": "ImageMinify"
        }, 
        {
            "location": "/tasks/Assets/#less", 
            "text": "Compiles less files.  ?php\n$this- taskLess([\n    'less/default.less' =  'css/default.css'\n])\n- run();\n?   Use one of both less compilers in your project:  leafo/lessphp :  ~0.5 , oyejorge/less.php :  ~1.5   Specify directory (string or array) for less imports lookup:  ?php\n$this- taskLess([\n    'less/default.less' =  'css/default.css'\n])\n- importDir('less')\n- compiler('lessphp')\n- run();\n?   You can implement additional compilers by extending this task and adding a\nmethod named after them and overloading the lessCompilers() method to\ninject the name there.   importDir($dirs)   Sets import directories  addImportPath($dir)   Adds import directory  setImportPaths($dirs)   Sets import directories  setFormatter($formatterName)    *  param string  $formatterName  compiler($compiler, array $options = Array ( ) )   Sets the compiler.", 
            "title": "Less"
        }, 
        {
            "location": "/tasks/Assets/#minify", 
            "text": "Minifies asset file (CSS or JS).  ?php\n$this- taskMinify( 'web/assets/theme.css' )\n     - run()\n?   Please install additional dependencies to use:  patchwork/jsqueeze :  ~1.0 , natxet/CssMin :  ~3.0    to($dst)   Sets destination. Tries to guess type from it.  type($type)   Sets type with validation.  singleLine($singleLine)   Single line option for the JS minimisation.  keepImportantComments($keepImportantComments)   keepImportantComments option for the JS minimisation.  specialVarRx($specialVarRx)   specialVarRx option for the JS minimisation.  __toString()   @return string", 
            "title": "Minify"
        }, 
        {
            "location": "/tasks/Assets/#scss", 
            "text": "Compiles scss files.  ?php\n$this- taskScss([\n    'scss/default.scss' =  'css/default.css'\n])\n- importDir('assets/styles')\n- run();\n?   Use the following scss compiler in your project:  leafo/scssphp :  ~0.1 ,  You can implement additional compilers by extending this task and adding a\nmethod named after them and overloading the scssCompilers() method to\ninject the name there.   setFormatter($formatterName)   Sets the formatter for scssphp  importDir($dirs)   Sets import directories  addImportPath($dir)   Adds import directory  setImportPaths($dirs)   Sets import directories  compiler($compiler, array $options = Array ( ) )   Sets the compiler.", 
            "title": "Scss"
        }, 
        {
            "location": "/tasks/Base/", 
            "text": "Base Tasks\n\n\nExec\n\n\nExecutes shell script. Closes it when running in background mode.\n\n\n?php\n$this-\ntaskExec('compass')-\narg('watch')-\nrun();\n// or use shortcut\n$this-\n_exec('compass watch');\n\n$this-\ntaskExec('compass watch')-\nbackground()-\nrun();\n\nif ($this-\ntaskExec('phpunit .')-\nrun()-\nwasSuccessful()) {\n $this-\nsay('tests passed');\n}\n\n?\n\n\n\n\n\n\n\nbackground()\n  Executes command in background mode (asynchronously)\n\n\ntimeout($timeout)\n  Stop command if it runs longer then $timeout in seconds\n\n\nidleTimeout($timeout)\n  Stops command if it does not output something for a while\n\n\nenv(array $env)\n  Sets the environment variables for the command\n\n\nsimulate($context)\n  Called in place of \nrun()\n for simulated tasks.\n\n\ndir($dir)\n  changes working directory of command\n\n\nprinted($arg)\n  Should command output be printed\n\n\narg($arg)\n  Pass argument to executable\n\n\nargs($args)\n  Pass methods parameters as arguments to executable\n\n\noption($option, $value = null)\n  Pass option to executable. Options are prefixed with \n--\n , value can be provided in second parameter.\n\n\noptionList($option, $value = null)\n  Pass multiple options to executable. Value can be a string or array.\n\n\n\n\nExecStack\n\n\nExecute commands one by one in stack.\nStack can be stopped on first fail if you call \nstopOnFail()\n.\n\n\n?php\n$this-\ntaskExecStack()\n -\nstopOnFail()\n -\nexec('mkdir site')\n -\nexec('cd site')\n -\nrun();\n\n?\n\n\n\n\n\n\n\n\n\n$this stopOnFail()\n \n\n\n\n\n\n\nexecutable($executable)\n \n\n\n\n\nexec($command)\n \n\n\nstopOnFail($stopOnFail = null)\n \n\n\nresult($result)\n \n\n\ndir($dir)\n  changes working directory of command\n\n\nprinted($arg)\n  Should command output be printed\n\n\n\n\nParallelExec\n\n\nClass ParallelExecTask\n\n\n?php\n$this-\ntaskParallelExec()\n  -\nprocess('php ~/demos/script.php hey')\n  -\nprocess('php ~/demos/script.php hoy')\n  -\nprocess('php ~/demos/script.php gou')\n  -\nrun();\n?\n\n\n\n\n\n\n\ntimeout(int $timeout)\n  stops process if it runs longer then \n$timeout\n (seconds)\n\n\n\n\nidleTimeout(int $timeout)\n  stops process if it does not output for time longer then \n$timeout\n (seconds)\n\n\n\n\n\n\nprinted($isPrinted = null)\n \n\n\n\n\nprocess($command)\n \n\n\ntimeout($timeout)\n \n\n\nidleTimeout($idleTimeout)\n \n\n\n\n\nSymfonyCommand\n\n\nExecutes Symfony Command\n\n\n?php\n// Symfony Command\n$this-\ntaskSymfonyCommand(new \\Codeception\\Command\\Run('run'))\n     -\narg('suite','acceptance')\n     -\nopt('debug')\n     -\nrun();\n\n// Artisan Command\n$this-\ntaskSymfonyCommand(new ModelGeneratorCommand())\n     -\narg('name', 'User')\n     -\nrun();\n?\n\n\n\n\n\n\n\narg($arg, $value)\n \n\n\nopt($option, $value = null)\n \n\n\n\n\nWatch\n\n\nRuns task when specified file or dir was changed.\nUses Lurker library.\n\n\n?php\n$this-\ntaskWatch()\n -\nmonitor('composer.json', function() {\n     $this-\ntaskComposerUpdate()-\nrun();\n})-\nmonitor('src', function() {\n     $this-\ntaskExec('phpunit')-\nrun();\n})-\nrun();\n?\n\n\n\n\n\n\n\nmonitor($paths, $callable)", 
            "title": "Base Tasks"
        }, 
        {
            "location": "/tasks/Base/#base-tasks", 
            "text": "", 
            "title": "Base Tasks"
        }, 
        {
            "location": "/tasks/Base/#exec", 
            "text": "Executes shell script. Closes it when running in background mode.  ?php\n$this- taskExec('compass')- arg('watch')- run();\n// or use shortcut\n$this- _exec('compass watch');\n\n$this- taskExec('compass watch')- background()- run();\n\nif ($this- taskExec('phpunit .')- run()- wasSuccessful()) {\n $this- say('tests passed');\n}\n\n?    background()   Executes command in background mode (asynchronously)  timeout($timeout)   Stop command if it runs longer then $timeout in seconds  idleTimeout($timeout)   Stops command if it does not output something for a while  env(array $env)   Sets the environment variables for the command  simulate($context)   Called in place of  run()  for simulated tasks.  dir($dir)   changes working directory of command  printed($arg)   Should command output be printed  arg($arg)   Pass argument to executable  args($args)   Pass methods parameters as arguments to executable  option($option, $value = null)   Pass option to executable. Options are prefixed with  --  , value can be provided in second parameter.  optionList($option, $value = null)   Pass multiple options to executable. Value can be a string or array.", 
            "title": "Exec"
        }, 
        {
            "location": "/tasks/Base/#execstack", 
            "text": "Execute commands one by one in stack.\nStack can be stopped on first fail if you call  stopOnFail() .  ?php\n$this- taskExecStack()\n - stopOnFail()\n - exec('mkdir site')\n - exec('cd site')\n - run();\n\n?     $this stopOnFail()      executable($executable)     exec($command)    stopOnFail($stopOnFail = null)    result($result)    dir($dir)   changes working directory of command  printed($arg)   Should command output be printed", 
            "title": "ExecStack"
        }, 
        {
            "location": "/tasks/Base/#parallelexec", 
            "text": "Class ParallelExecTask  ?php\n$this- taskParallelExec()\n  - process('php ~/demos/script.php hey')\n  - process('php ~/demos/script.php hoy')\n  - process('php ~/demos/script.php gou')\n  - run();\n?    timeout(int $timeout)   stops process if it runs longer then  $timeout  (seconds)   idleTimeout(int $timeout)   stops process if it does not output for time longer then  $timeout  (seconds)    printed($isPrinted = null)     process($command)    timeout($timeout)    idleTimeout($idleTimeout)", 
            "title": "ParallelExec"
        }, 
        {
            "location": "/tasks/Base/#symfonycommand", 
            "text": "Executes Symfony Command  ?php\n// Symfony Command\n$this- taskSymfonyCommand(new \\Codeception\\Command\\Run('run'))\n     - arg('suite','acceptance')\n     - opt('debug')\n     - run();\n\n// Artisan Command\n$this- taskSymfonyCommand(new ModelGeneratorCommand())\n     - arg('name', 'User')\n     - run();\n?    arg($arg, $value)    opt($option, $value = null)", 
            "title": "SymfonyCommand"
        }, 
        {
            "location": "/tasks/Base/#watch", 
            "text": "Runs task when specified file or dir was changed.\nUses Lurker library.  ?php\n$this- taskWatch()\n - monitor('composer.json', function() {\n     $this- taskComposerUpdate()- run();\n})- monitor('src', function() {\n     $this- taskExec('phpunit')- run();\n})- run();\n?    monitor($paths, $callable)", 
            "title": "Watch"
        }, 
        {
            "location": "/tasks/Bower/", 
            "text": "Bower Tasks\n\n\nInstall\n\n\nBower Install\n\n\n?php\n// simple execution\n$this-\ntaskBowerInstall()-\nrun();\n\n// prefer dist with custom path\n$this-\ntaskBowerInstall('path/to/my/bower')\n     -\nnoDev()\n     -\nrun();\n?\n\n\n\n\n\n\n\nallowRoot()\n  adds \nallow-root\n option to bower\n\n\nforceLatest()\n  adds \nforce-latest\n option to bower\n\n\nnoDev()\n  adds \nproduction\n option to bower\n\n\noffline()\n  adds \noffline\n option to bower\n\n\ndir($dir)\n  changes working directory of command\n\n\nprinted($arg)\n  Should command output be printed\n\n\narg($arg)\n  Pass argument to executable\n\n\nargs($args)\n  Pass methods parameters as arguments to executable\n\n\noption($option, $value = null)\n  Pass option to executable. Options are prefixed with \n--\n , value can be provided in second parameter.\n\n\noptionList($option, $value = null)\n  Pass multiple options to executable. Value can be a string or array.\n\n\n\n\nUpdate\n\n\nBower Update\n\n\n?php\n// simple execution\n$this-\ntaskBowerUpdate-\nrun();\n\n// prefer dist with custom path\n$this-\ntaskBowerUpdate('path/to/my/bower')\n     -\nnoDev()\n     -\nrun();\n?\n\n\n\n\n\n\n\nallowRoot()\n  adds \nallow-root\n option to bower\n\n\nforceLatest()\n  adds \nforce-latest\n option to bower\n\n\nnoDev()\n  adds \nproduction\n option to bower\n\n\noffline()\n  adds \noffline\n option to bower\n\n\ndir($dir)\n  changes working directory of command\n\n\nprinted($arg)\n  Should command output be printed\n\n\narg($arg)\n  Pass argument to executable\n\n\nargs($args)\n  Pass methods parameters as arguments to executable\n\n\noption($option, $value = null)\n  Pass option to executable. Options are prefixed with \n--\n , value can be provided in second parameter.\n\n\noptionList($option, $value = null)\n  Pass multiple options to executable. Value can be a string or array.", 
            "title": "Bower Tasks"
        }, 
        {
            "location": "/tasks/Bower/#bower-tasks", 
            "text": "", 
            "title": "Bower Tasks"
        }, 
        {
            "location": "/tasks/Bower/#install", 
            "text": "Bower Install  ?php\n// simple execution\n$this- taskBowerInstall()- run();\n\n// prefer dist with custom path\n$this- taskBowerInstall('path/to/my/bower')\n     - noDev()\n     - run();\n?    allowRoot()   adds  allow-root  option to bower  forceLatest()   adds  force-latest  option to bower  noDev()   adds  production  option to bower  offline()   adds  offline  option to bower  dir($dir)   changes working directory of command  printed($arg)   Should command output be printed  arg($arg)   Pass argument to executable  args($args)   Pass methods parameters as arguments to executable  option($option, $value = null)   Pass option to executable. Options are prefixed with  --  , value can be provided in second parameter.  optionList($option, $value = null)   Pass multiple options to executable. Value can be a string or array.", 
            "title": "Install"
        }, 
        {
            "location": "/tasks/Bower/#update", 
            "text": "Bower Update  ?php\n// simple execution\n$this- taskBowerUpdate- run();\n\n// prefer dist with custom path\n$this- taskBowerUpdate('path/to/my/bower')\n     - noDev()\n     - run();\n?    allowRoot()   adds  allow-root  option to bower  forceLatest()   adds  force-latest  option to bower  noDev()   adds  production  option to bower  offline()   adds  offline  option to bower  dir($dir)   changes working directory of command  printed($arg)   Should command output be printed  arg($arg)   Pass argument to executable  args($args)   Pass methods parameters as arguments to executable  option($option, $value = null)   Pass option to executable. Options are prefixed with  --  , value can be provided in second parameter.  optionList($option, $value = null)   Pass multiple options to executable. Value can be a string or array.", 
            "title": "Update"
        }, 
        {
            "location": "/tasks/Composer/", 
            "text": "Composer Tasks\n\n\nDumpAutoload\n\n\nComposer Dump Autoload\n\n\n?php\n// simple execution\n$this-\ntaskComposerDumpAutoload()-\nrun();\n\n// dump auto loader with custom path\n$this-\ntaskComposerDumpAutoload('path/to/my/composer.phar')\n     -\npreferDist()\n     -\nrun();\n\n// optimize autoloader dump with custom path\n$this-\ntaskComposerDumpAutoload('path/to/my/composer.phar')\n     -\noptimize()\n     -\nrun();\n\n// optimize autoloader dump with custom path and no dev\n$this-\ntaskComposerDumpAutoload('path/to/my/composer.phar')\n     -\noptimize()\n     -\nnoDev()\n     -\nrun();\n?\n\n\n\n\n\n\n\noptimize()\n \n\n\npreferDist()\n  adds \nprefer-dist\n option to composer\n\n\npreferSource()\n  adds \nprefer-source\n option to composer\n\n\nnoDev()\n  adds \nno-dev\n option to composer\n\n\nnoAnsi()\n  adds \nno-ansi\n option to composer\n\n\nansi()\n  adds \nansi\n option to composer\n\n\noptimizeAutoloader()\n  adds \noptimize-autoloader\n option to composer\n\n\ndir($dir)\n  changes working directory of command\n\n\nprinted($arg)\n  Should command output be printed\n\n\narg($arg)\n  Pass argument to executable\n\n\nargs($args)\n  Pass methods parameters as arguments to executable\n\n\noption($option, $value = null)\n  Pass option to executable. Options are prefixed with \n--\n , value can be provided in second parameter.\n\n\noptionList($option, $value = null)\n  Pass multiple options to executable. Value can be a string or array.\n\n\n\n\nInstall\n\n\nComposer Install\n\n\n?php\n// simple execution\n$this-\ntaskComposerInstall()-\nrun();\n\n// prefer dist with custom path\n$this-\ntaskComposerInstall('path/to/my/composer.phar')\n     -\npreferDist()\n     -\nrun();\n\n// optimize autoloader with custom path\n$this-\ntaskComposerInstall('path/to/my/composer.phar')\n     -\noptimizeAutoloader()\n     -\nrun();\n?\n\n\n\n\n\n\n\npreferDist()\n  adds \nprefer-dist\n option to composer\n\n\npreferSource()\n  adds \nprefer-source\n option to composer\n\n\nnoDev()\n  adds \nno-dev\n option to composer\n\n\nnoAnsi()\n  adds \nno-ansi\n option to composer\n\n\nansi()\n  adds \nansi\n option to composer\n\n\noptimizeAutoloader()\n  adds \noptimize-autoloader\n option to composer\n\n\ndir($dir)\n  changes working directory of command\n\n\nprinted($arg)\n  Should command output be printed\n\n\narg($arg)\n  Pass argument to executable\n\n\nargs($args)\n  Pass methods parameters as arguments to executable\n\n\noption($option, $value = null)\n  Pass option to executable. Options are prefixed with \n--\n , value can be provided in second parameter.\n\n\noptionList($option, $value = null)\n  Pass multiple options to executable. Value can be a string or array.\n\n\n\n\nRemove\n\n\nComposer Validate\n\n\n?php\n// simple execution\n$this-\ntaskComposerValidate()-\nrun();\n?\n\n\n\n\n\n\n\ndev()\n \n\n\nnoProgress()\n \n\n\nnoUpdate()\n \n\n\nupdateNoDev()\n \n\n\nnoUpdateWithDependencies()\n \n\n\npreferDist()\n  adds \nprefer-dist\n option to composer\n\n\npreferSource()\n  adds \nprefer-source\n option to composer\n\n\nnoDev()\n  adds \nno-dev\n option to composer\n\n\nnoAnsi()\n  adds \nno-ansi\n option to composer\n\n\nansi()\n  adds \nansi\n option to composer\n\n\noptimizeAutoloader()\n  adds \noptimize-autoloader\n option to composer\n\n\ndir($dir)\n  changes working directory of command\n\n\nprinted($arg)\n  Should command output be printed\n\n\narg($arg)\n  Pass argument to executable\n\n\nargs($args)\n  Pass methods parameters as arguments to executable\n\n\noption($option, $value = null)\n  Pass option to executable. Options are prefixed with \n--\n , value can be provided in second parameter.\n\n\noptionList($option, $value = null)\n  Pass multiple options to executable. Value can be a string or array.\n\n\n\n\nUpdate\n\n\nComposer Update\n\n\n?php\n// simple execution\n$this-\ntaskComposerUpdate()-\nrun();\n\n// prefer dist with custom path\n$this-\ntaskComposerUpdate('path/to/my/composer.phar')\n     -\npreferDist()\n     -\nrun();\n\n// optimize autoloader with custom path\n$this-\ntaskComposerUpdate('path/to/my/composer.phar')\n     -\noptimizeAutoloader()\n     -\nrun();\n?\n\n\n\n\n\n\n\npreferDist()\n  adds \nprefer-dist\n option to composer\n\n\npreferSource()\n  adds \nprefer-source\n option to composer\n\n\nnoDev()\n  adds \nno-dev\n option to composer\n\n\nnoAnsi()\n  adds \nno-ansi\n option to composer\n\n\nansi()\n  adds \nansi\n option to composer\n\n\noptimizeAutoloader()\n  adds \noptimize-autoloader\n option to composer\n\n\ndir($dir)\n  changes working directory of command\n\n\nprinted($arg)\n  Should command output be printed\n\n\narg($arg)\n  Pass argument to executable\n\n\nargs($args)\n  Pass methods parameters as arguments to executable\n\n\noption($option, $value = null)\n  Pass option to executable. Options are prefixed with \n--\n , value can be provided in second parameter.\n\n\noptionList($option, $value = null)\n  Pass multiple options to executable. Value can be a string or array.\n\n\n\n\nValidate\n\n\nComposer Validate\n\n\n?php\n// simple execution\n$this-\ntaskComposerValidate()-\nrun();\n?\n\n\n\n\n\n\n\nnoCheckAll()\n \n\n\nnoCheckLock()\n \n\n\nnoCheckPublish()\n \n\n\nwithDependencies()\n \n\n\nstrict()\n \n\n\npreferDist()\n  adds \nprefer-dist\n option to composer\n\n\npreferSource()\n  adds \nprefer-source\n option to composer\n\n\nnoDev()\n  adds \nno-dev\n option to composer\n\n\nnoAnsi()\n  adds \nno-ansi\n option to composer\n\n\nansi()\n  adds \nansi\n option to composer\n\n\noptimizeAutoloader()\n  adds \noptimize-autoloader\n option to composer\n\n\ndir($dir)\n  changes working directory of command\n\n\nprinted($arg)\n  Should command output be printed\n\n\narg($arg)\n  Pass argument to executable\n\n\nargs($args)\n  Pass methods parameters as arguments to executable\n\n\noption($option, $value = null)\n  Pass option to executable. Options are prefixed with \n--\n , value can be provided in second parameter.\n\n\noptionList($option, $value = null)\n  Pass multiple options to executable. Value can be a string or array.", 
            "title": "Composer Tasks"
        }, 
        {
            "location": "/tasks/Composer/#composer-tasks", 
            "text": "", 
            "title": "Composer Tasks"
        }, 
        {
            "location": "/tasks/Composer/#dumpautoload", 
            "text": "Composer Dump Autoload  ?php\n// simple execution\n$this- taskComposerDumpAutoload()- run();\n\n// dump auto loader with custom path\n$this- taskComposerDumpAutoload('path/to/my/composer.phar')\n     - preferDist()\n     - run();\n\n// optimize autoloader dump with custom path\n$this- taskComposerDumpAutoload('path/to/my/composer.phar')\n     - optimize()\n     - run();\n\n// optimize autoloader dump with custom path and no dev\n$this- taskComposerDumpAutoload('path/to/my/composer.phar')\n     - optimize()\n     - noDev()\n     - run();\n?    optimize()    preferDist()   adds  prefer-dist  option to composer  preferSource()   adds  prefer-source  option to composer  noDev()   adds  no-dev  option to composer  noAnsi()   adds  no-ansi  option to composer  ansi()   adds  ansi  option to composer  optimizeAutoloader()   adds  optimize-autoloader  option to composer  dir($dir)   changes working directory of command  printed($arg)   Should command output be printed  arg($arg)   Pass argument to executable  args($args)   Pass methods parameters as arguments to executable  option($option, $value = null)   Pass option to executable. Options are prefixed with  --  , value can be provided in second parameter.  optionList($option, $value = null)   Pass multiple options to executable. Value can be a string or array.", 
            "title": "DumpAutoload"
        }, 
        {
            "location": "/tasks/Composer/#install", 
            "text": "Composer Install  ?php\n// simple execution\n$this- taskComposerInstall()- run();\n\n// prefer dist with custom path\n$this- taskComposerInstall('path/to/my/composer.phar')\n     - preferDist()\n     - run();\n\n// optimize autoloader with custom path\n$this- taskComposerInstall('path/to/my/composer.phar')\n     - optimizeAutoloader()\n     - run();\n?    preferDist()   adds  prefer-dist  option to composer  preferSource()   adds  prefer-source  option to composer  noDev()   adds  no-dev  option to composer  noAnsi()   adds  no-ansi  option to composer  ansi()   adds  ansi  option to composer  optimizeAutoloader()   adds  optimize-autoloader  option to composer  dir($dir)   changes working directory of command  printed($arg)   Should command output be printed  arg($arg)   Pass argument to executable  args($args)   Pass methods parameters as arguments to executable  option($option, $value = null)   Pass option to executable. Options are prefixed with  --  , value can be provided in second parameter.  optionList($option, $value = null)   Pass multiple options to executable. Value can be a string or array.", 
            "title": "Install"
        }, 
        {
            "location": "/tasks/Composer/#remove", 
            "text": "Composer Validate  ?php\n// simple execution\n$this- taskComposerValidate()- run();\n?    dev()    noProgress()    noUpdate()    updateNoDev()    noUpdateWithDependencies()    preferDist()   adds  prefer-dist  option to composer  preferSource()   adds  prefer-source  option to composer  noDev()   adds  no-dev  option to composer  noAnsi()   adds  no-ansi  option to composer  ansi()   adds  ansi  option to composer  optimizeAutoloader()   adds  optimize-autoloader  option to composer  dir($dir)   changes working directory of command  printed($arg)   Should command output be printed  arg($arg)   Pass argument to executable  args($args)   Pass methods parameters as arguments to executable  option($option, $value = null)   Pass option to executable. Options are prefixed with  --  , value can be provided in second parameter.  optionList($option, $value = null)   Pass multiple options to executable. Value can be a string or array.", 
            "title": "Remove"
        }, 
        {
            "location": "/tasks/Composer/#update", 
            "text": "Composer Update  ?php\n// simple execution\n$this- taskComposerUpdate()- run();\n\n// prefer dist with custom path\n$this- taskComposerUpdate('path/to/my/composer.phar')\n     - preferDist()\n     - run();\n\n// optimize autoloader with custom path\n$this- taskComposerUpdate('path/to/my/composer.phar')\n     - optimizeAutoloader()\n     - run();\n?    preferDist()   adds  prefer-dist  option to composer  preferSource()   adds  prefer-source  option to composer  noDev()   adds  no-dev  option to composer  noAnsi()   adds  no-ansi  option to composer  ansi()   adds  ansi  option to composer  optimizeAutoloader()   adds  optimize-autoloader  option to composer  dir($dir)   changes working directory of command  printed($arg)   Should command output be printed  arg($arg)   Pass argument to executable  args($args)   Pass methods parameters as arguments to executable  option($option, $value = null)   Pass option to executable. Options are prefixed with  --  , value can be provided in second parameter.  optionList($option, $value = null)   Pass multiple options to executable. Value can be a string or array.", 
            "title": "Update"
        }, 
        {
            "location": "/tasks/Composer/#validate", 
            "text": "Composer Validate  ?php\n// simple execution\n$this- taskComposerValidate()- run();\n?    noCheckAll()    noCheckLock()    noCheckPublish()    withDependencies()    strict()    preferDist()   adds  prefer-dist  option to composer  preferSource()   adds  prefer-source  option to composer  noDev()   adds  no-dev  option to composer  noAnsi()   adds  no-ansi  option to composer  ansi()   adds  ansi  option to composer  optimizeAutoloader()   adds  optimize-autoloader  option to composer  dir($dir)   changes working directory of command  printed($arg)   Should command output be printed  arg($arg)   Pass argument to executable  args($args)   Pass methods parameters as arguments to executable  option($option, $value = null)   Pass option to executable. Options are prefixed with  --  , value can be provided in second parameter.  optionList($option, $value = null)   Pass multiple options to executable. Value can be a string or array.", 
            "title": "Validate"
        }, 
        {
            "location": "/tasks/Development/", 
            "text": "Development Tasks\n\n\nChangelog\n\n\nHelps to manage changelog file.\nCreates or updates \nchangelog.md\n file with recent changes in current version.\n\n\n?php\n$version = \n0.1.0\n;\n$this-\ntaskChangelog()\n -\nversion($version)\n -\nchange(\nreleased to github\n)\n -\nrun();\n?\n\n\n\n\n\nChanges can be asked from Console\n\n\n?php\n$this-\ntaskChangelog()\n -\nversion($version)\n -\naskForChanges()\n -\nrun();\n?\n\n\n\n\n\n\n\nDevelopment\\Changelog filename(string $filename)\n \n\n\nDevelopment\\Changelog anchor(string $anchor)\n \n\n\n\n\nDevelopment\\Changelog version(string $version)\n \n\n\n\n\n\n\nfilename($filename)\n \n\n\n\n\nlog($item)\n \n\n\nanchor($anchor)\n \n\n\nversion($version)\n \n\n\nchanges(array $data)\n \n\n\nchange($change)\n \n\n\ngetChanges()\n \n\n\n\n\nGenerateMarkdownDoc\n\n\nSimple documentation generator from source files.\nTakes classes, properties and methods with their docblocks and writes down a markdown file.\n\n\n?php\n$this-\ntaskGenerateMarkdownDoc('models.md')\n     -\ndocClass('Model\\User') // take class Model\\User\n     -\ndocClass('Model\\Post') // take class Model\\Post\n     -\nfilterMethods(function(\\ReflectionMethod $r) {\n         return $r-\nisPublic() or $r-\nisProtected(); // process public and protected methods\n     })-\nprocessClass(function(\\ReflectionClass $r, $text) {\n         return \nClass \n.$r-\ngetName().\n\\n\\n$text\\n\\n###Methods\\n\n;\n     })-\nrun();\n\n\n\n\nBy default this task generates a documentation for each public method of a class.\nIt combines method signature with a docblock. Both can be post-processed.\n\n\n?php\n$this-\ntaskGenerateMarkdownDoc('models.md')\n     -\ndocClass('Model\\User')\n     -\nprocessClassSignature(false) // false can be passed to not include class signature\n     -\nprocessClassDocBlock(function(\\ReflectionClass $r, $text) {\n         return \n[This is part of application model]\\n\n . $text;\n     })-\nprocessMethodSignature(function(\\ReflectionMethod $r, $text) {\n         return \n#### {$r-\nname}()\n;\n     })-\nprocessMethodDocBlock(function(\\ReflectionMethod $r, $text) {\n         return strpos($r-\nname, 'save')===0 ? \n[Saves to the database]\\n\n . $text : $text;\n     })-\nrun();\n\n\n\n\n\n\ndocClass(string $classname)\n  put a class you want to be documented\n\n\nfilterMethods(\\Closure $func)\n  using callback function filter out methods that won't be documented\n\n\nfilterClasses(\\Closure $func)\n  using callback function filter out classes that won't be documented\n\n\nfilterProperties(\\Closure $func)\n  using callback function filter out properties that won't be documented\n\n\nprocessClass(\\Closure $func)\n  post-process class documentation\n\n\nprocessClassSignature(\\Closure $func)\n  post-process class signature. Provide \nfalse\n to skip.\n\n\nprocessClassDocBlock(\\Closure $func)\n  post-process class docblock contents. Provide \nfalse\n to skip.\n\n\nprocessMethod(\\Closure $func)\n  post-process method documentation. Provide \nfalse\n to skip.\n\n\nprocessMethodSignature(\\Closure $func)\n  post-process method signature. Provide \nfalse\n to skip.\n\n\nprocessMethodDocBlock(\\Closure $func)\n  post-process method docblock contents. Provide \nfalse\n to skip.\n\n\nprocessProperty(\\Closure $func)\n  post-process property documentation. Provide \nfalse\n to skip.\n\n\nprocessPropertySignature(\\Closure $func)\n  post-process property signature. Provide \nfalse\n to skip.\n\n\nprocessPropertyDocBlock(\\Closure $func)\n  post-process property docblock contents. Provide \nfalse\n to skip.\n\n\nreorder(\\Closure $func)\n  use a function to reorder classes\n\n\nreorderMethods(\\Closure $func)\n  use a function to reorder methods in class\n\n\nprepend($text)\n  inserts text into beginning of markdown file\n\n\n\n\nappend($text)\n  inserts text in the end of markdown file\n\n\n\n\n\n\ndocClass($item)\n \n\n\n\n\nfilterMethods($filterMethods)\n \n\n\nfilterClasses($filterClasses)\n \n\n\nfilterProperties($filterProperties)\n \n\n\nprocessClass($processClass)\n \n\n\nprocessClassSignature($processClassSignature)\n \n\n\nprocessClassDocBlock($processClassDocBlock)\n \n\n\nprocessMethod($processMethod)\n \n\n\nprocessMethodSignature($processMethodSignature)\n \n\n\nprocessMethodDocBlock($processMethodDocBlock)\n \n\n\nprocessProperty($processProperty)\n \n\n\nprocessPropertySignature($processPropertySignature)\n \n\n\nprocessPropertyDocBlock($processPropertyDocBlock)\n \n\n\nreorder($reorder)\n \n\n\nreorderMethods($reorderMethods)\n \n\n\nreorderProperties($reorderProperties)\n \n\n\nfilename($filename)\n \n\n\nprepend($prepend)\n \n\n\nappend($append)\n \n\n\ntext($text)\n \n\n\ntextForClass($item)\n \n\n\n\n\nGenerate\n\n\nGenerate a Robo Task that is a wrapper around an existing class.\n\n\n?php\n$this-\ntaskGenerateTask('Symfony\\Component\\Filesystem\\Filesystem', 'FilesystemStack')\n  -\nrun();\n\n\n\n\nGitHubRelease\n\n\nPublishes new GitHub release.\n\n\n?php\n$this-\ntaskGitHubRelease('0.1.0')\n  -\nuri('consolidation-org/Robo')\n  -\ndescription('Add stuff people need.')\n  -\nchange('Fix #123')\n  -\nchange('Add frobulation method to all widgets')\n  -\nrun();\n?\n\n\n\n\n\n\n\ntag($tag)\n \n\n\ndraft($draft)\n \n\n\nname($name)\n \n\n\ndescription($description)\n \n\n\nprerelease($prerelease)\n \n\n\ncomittish($comittish)\n \n\n\nappendDescription($description)\n \n\n\nchanges(array $changes)\n \n\n\nchange($change)\n \n\n\nrepo($repo)\n \n\n\nowner($owner)\n \n\n\nuri($uri)\n \n\n\nuser($user)\n \n\n\npassword($password)\n \n\n\n\n\nOpenBrowser\n\n\nOpens the default's user browser\ncode inspired from openBrowser() function in https://github.com/composer/composer/blob/master/src/Composer/Command/HomeCommand.php\n\n\n?php\n// open one browser window\n$this-\ntaskOpenBrowser('http://localhost')\n -\nrun();\n\n// open two browser windows\n$this-\ntaskOpenBrowser([\n    'http://localhost/mysite',\n    'http://localhost/mysite2'\n  ])\n  -\nrun();\n\n\n\n\nPackPhar\n\n\nCreates Phar.\n\n\n?php\n$pharTask = $this-\ntaskPackPhar('package/codecept.phar')\n  -\ncompress()\n  -\nstub('package/stub.php');\n\n $finder = Finder::create()\n     -\nname('*.php')\n       -\nin('src');\n\n   foreach ($finder as $file) {\n       $pharTask-\naddFile('src/'.$file-\ngetRelativePathname(), $file-\ngetRealPath());\n   }\n\n   $finder = Finder::create()-\nfiles()\n       -\nname('*.php')\n       -\nin('vendor');\n\n   foreach ($finder as $file) {\n       $pharTask-\naddStripped('vendor/'.$file-\ngetRelativePathname(), $file-\ngetRealPath());\n   }\n   $pharTask-\nrun();\n\n   // verify Phar is packed correctly\n   $code = $this-\n_exec('php package/codecept.phar');\n?\n\n\n\n\n\n\n\ncompress($compress = null)\n   * \nparam boolean\n $compress\n\n\nstub($stub)\n   * \nparam\n $stub\n\n\naddStripped($path, $file)\n \n\n\naddFile($path, $file)\n \n\n\naddFiles($files)\n \n\n\nexecutable($file)\n \n\n\n\n\nPhpServer\n\n\nRuns PHP server and stops it when task finishes.\n\n\n?php\n// run server in /public directory\n$this-\ntaskServer(8000)\n -\ndir('public')\n -\nrun();\n\n// run with IP 0.0.0.0\n$this-\ntaskServer(8000)\n -\nhost('0.0.0.0')\n -\nrun();\n\n// execute server in background\n$this-\ntaskServer(8000)\n -\nbackground()\n -\nrun();\n?\n\n\n\n\n\n\n\nhost($host)\n \n\n\ndir($path)\n  changes working directory of command\n\n\nbackground()\n  Executes command in background mode (asynchronously)\n\n\ntimeout($timeout)\n  Stop command if it runs longer then $timeout in seconds\n\n\nidleTimeout($timeout)\n  Stops command if it does not output something for a while\n\n\nenv(array $env)\n  Sets the environment variables for the command\n\n\nsimulate($context)\n  Called in place of \nrun()\n for simulated tasks.\n\n\nprinted($arg)\n  Should command output be printed\n\n\narg($arg)\n  Pass argument to executable\n\n\nargs($args)\n  Pass methods parameters as arguments to executable\n\n\noption($option, $value = null)\n  Pass option to executable. Options are prefixed with \n--\n , value can be provided in second parameter.\n\n\noptionList($option, $value = null)\n  Pass multiple options to executable. Value can be a string or array.\n\n\n\n\nSemVer\n\n\nHelps to maintain \n.semver\n file.\n\n\n?php\n$this-\ntaskSemVer('.semver')\n     -\nincrement()\n     -\nrun();\n?\n\n\n\n\n\n\n\n__toString()\n \n\n\nsetFormat($format)\n \n\n\nsetMetadataSeparator($separator)\n \n\n\nsetPrereleaseSeparator($separator)\n \n\n\nincrement($what = null)\n \n\n\nprerelease($tag = null)\n \n\n\nmetadata($data)", 
            "title": "Development Tasks"
        }, 
        {
            "location": "/tasks/Development/#development-tasks", 
            "text": "", 
            "title": "Development Tasks"
        }, 
        {
            "location": "/tasks/Development/#changelog", 
            "text": "Helps to manage changelog file.\nCreates or updates  changelog.md  file with recent changes in current version.  ?php\n$version =  0.1.0 ;\n$this- taskChangelog()\n - version($version)\n - change( released to github )\n - run();\n?   Changes can be asked from Console  ?php\n$this- taskChangelog()\n - version($version)\n - askForChanges()\n - run();\n?    Development\\Changelog filename(string $filename)    Development\\Changelog anchor(string $anchor)     Development\\Changelog version(string $version)      filename($filename)     log($item)    anchor($anchor)    version($version)    changes(array $data)    change($change)    getChanges()", 
            "title": "Changelog"
        }, 
        {
            "location": "/tasks/Development/#generatemarkdowndoc", 
            "text": "Simple documentation generator from source files.\nTakes classes, properties and methods with their docblocks and writes down a markdown file.  ?php\n$this- taskGenerateMarkdownDoc('models.md')\n     - docClass('Model\\User') // take class Model\\User\n     - docClass('Model\\Post') // take class Model\\Post\n     - filterMethods(function(\\ReflectionMethod $r) {\n         return $r- isPublic() or $r- isProtected(); // process public and protected methods\n     })- processClass(function(\\ReflectionClass $r, $text) {\n         return  Class  .$r- getName(). \\n\\n$text\\n\\n###Methods\\n ;\n     })- run();  By default this task generates a documentation for each public method of a class.\nIt combines method signature with a docblock. Both can be post-processed.  ?php\n$this- taskGenerateMarkdownDoc('models.md')\n     - docClass('Model\\User')\n     - processClassSignature(false) // false can be passed to not include class signature\n     - processClassDocBlock(function(\\ReflectionClass $r, $text) {\n         return  [This is part of application model]\\n  . $text;\n     })- processMethodSignature(function(\\ReflectionMethod $r, $text) {\n         return  #### {$r- name}() ;\n     })- processMethodDocBlock(function(\\ReflectionMethod $r, $text) {\n         return strpos($r- name, 'save')===0 ?  [Saves to the database]\\n  . $text : $text;\n     })- run();   docClass(string $classname)   put a class you want to be documented  filterMethods(\\Closure $func)   using callback function filter out methods that won't be documented  filterClasses(\\Closure $func)   using callback function filter out classes that won't be documented  filterProperties(\\Closure $func)   using callback function filter out properties that won't be documented  processClass(\\Closure $func)   post-process class documentation  processClassSignature(\\Closure $func)   post-process class signature. Provide  false  to skip.  processClassDocBlock(\\Closure $func)   post-process class docblock contents. Provide  false  to skip.  processMethod(\\Closure $func)   post-process method documentation. Provide  false  to skip.  processMethodSignature(\\Closure $func)   post-process method signature. Provide  false  to skip.  processMethodDocBlock(\\Closure $func)   post-process method docblock contents. Provide  false  to skip.  processProperty(\\Closure $func)   post-process property documentation. Provide  false  to skip.  processPropertySignature(\\Closure $func)   post-process property signature. Provide  false  to skip.  processPropertyDocBlock(\\Closure $func)   post-process property docblock contents. Provide  false  to skip.  reorder(\\Closure $func)   use a function to reorder classes  reorderMethods(\\Closure $func)   use a function to reorder methods in class  prepend($text)   inserts text into beginning of markdown file   append($text)   inserts text in the end of markdown file    docClass($item)     filterMethods($filterMethods)    filterClasses($filterClasses)    filterProperties($filterProperties)    processClass($processClass)    processClassSignature($processClassSignature)    processClassDocBlock($processClassDocBlock)    processMethod($processMethod)    processMethodSignature($processMethodSignature)    processMethodDocBlock($processMethodDocBlock)    processProperty($processProperty)    processPropertySignature($processPropertySignature)    processPropertyDocBlock($processPropertyDocBlock)    reorder($reorder)    reorderMethods($reorderMethods)    reorderProperties($reorderProperties)    filename($filename)    prepend($prepend)    append($append)    text($text)    textForClass($item)", 
            "title": "GenerateMarkdownDoc"
        }, 
        {
            "location": "/tasks/Development/#generate", 
            "text": "Generate a Robo Task that is a wrapper around an existing class.  ?php\n$this- taskGenerateTask('Symfony\\Component\\Filesystem\\Filesystem', 'FilesystemStack')\n  - run();", 
            "title": "Generate"
        }, 
        {
            "location": "/tasks/Development/#githubrelease", 
            "text": "Publishes new GitHub release.  ?php\n$this- taskGitHubRelease('0.1.0')\n  - uri('consolidation-org/Robo')\n  - description('Add stuff people need.')\n  - change('Fix #123')\n  - change('Add frobulation method to all widgets')\n  - run();\n?    tag($tag)    draft($draft)    name($name)    description($description)    prerelease($prerelease)    comittish($comittish)    appendDescription($description)    changes(array $changes)    change($change)    repo($repo)    owner($owner)    uri($uri)    user($user)    password($password)", 
            "title": "GitHubRelease"
        }, 
        {
            "location": "/tasks/Development/#openbrowser", 
            "text": "Opens the default's user browser\ncode inspired from openBrowser() function in https://github.com/composer/composer/blob/master/src/Composer/Command/HomeCommand.php  ?php\n// open one browser window\n$this- taskOpenBrowser('http://localhost')\n - run();\n\n// open two browser windows\n$this- taskOpenBrowser([\n    'http://localhost/mysite',\n    'http://localhost/mysite2'\n  ])\n  - run();", 
            "title": "OpenBrowser"
        }, 
        {
            "location": "/tasks/Development/#packphar", 
            "text": "Creates Phar.  ?php\n$pharTask = $this- taskPackPhar('package/codecept.phar')\n  - compress()\n  - stub('package/stub.php');\n\n $finder = Finder::create()\n     - name('*.php')\n       - in('src');\n\n   foreach ($finder as $file) {\n       $pharTask- addFile('src/'.$file- getRelativePathname(), $file- getRealPath());\n   }\n\n   $finder = Finder::create()- files()\n       - name('*.php')\n       - in('vendor');\n\n   foreach ($finder as $file) {\n       $pharTask- addStripped('vendor/'.$file- getRelativePathname(), $file- getRealPath());\n   }\n   $pharTask- run();\n\n   // verify Phar is packed correctly\n   $code = $this- _exec('php package/codecept.phar');\n?    compress($compress = null)    *  param boolean  $compress  stub($stub)    *  param  $stub  addStripped($path, $file)    addFile($path, $file)    addFiles($files)    executable($file)", 
            "title": "PackPhar"
        }, 
        {
            "location": "/tasks/Development/#phpserver", 
            "text": "Runs PHP server and stops it when task finishes.  ?php\n// run server in /public directory\n$this- taskServer(8000)\n - dir('public')\n - run();\n\n// run with IP 0.0.0.0\n$this- taskServer(8000)\n - host('0.0.0.0')\n - run();\n\n// execute server in background\n$this- taskServer(8000)\n - background()\n - run();\n?    host($host)    dir($path)   changes working directory of command  background()   Executes command in background mode (asynchronously)  timeout($timeout)   Stop command if it runs longer then $timeout in seconds  idleTimeout($timeout)   Stops command if it does not output something for a while  env(array $env)   Sets the environment variables for the command  simulate($context)   Called in place of  run()  for simulated tasks.  printed($arg)   Should command output be printed  arg($arg)   Pass argument to executable  args($args)   Pass methods parameters as arguments to executable  option($option, $value = null)   Pass option to executable. Options are prefixed with  --  , value can be provided in second parameter.  optionList($option, $value = null)   Pass multiple options to executable. Value can be a string or array.", 
            "title": "PhpServer"
        }, 
        {
            "location": "/tasks/Development/#semver", 
            "text": "Helps to maintain  .semver  file.  ?php\n$this- taskSemVer('.semver')\n     - increment()\n     - run();\n?    __toString()    setFormat($format)    setMetadataSeparator($separator)    setPrereleaseSeparator($separator)    increment($what = null)    prerelease($tag = null)    metadata($data)", 
            "title": "SemVer"
        }, 
        {
            "location": "/tasks/Docker/", 
            "text": "Docker Tasks\n\n\nBuild\n\n\nBuilds Docker image\n\n\n?php\n$this-\ntaskDockerBuild()-\nrun();\n\n$this-\ntaskDockerBuild('path/to/dir')\n     -\ntag('database')\n     -\nrun();\n\n?\n\n\n\n\n\n\nClass Build\n@package Robo\\Task\\Docker\n\n\n\n\ntag($tag)\n \n\n\ndir($dir)\n  changes working directory of command\n\n\nprinted($arg)\n  Should command output be printed\n\n\narg($arg)\n  Pass argument to executable\n\n\nargs($args)\n  Pass methods parameters as arguments to executable\n\n\noption($option, $value = null)\n  Pass option to executable. Options are prefixed with \n--\n , value can be provided in second parameter.\n\n\noptionList($option, $value = null)\n  Pass multiple options to executable. Value can be a string or array.\n\n\n\n\nCommit\n\n\nCommits docker container to an image\n\n\n$this-\ntaskDockerCommit($containerId)\n     -\nname('my/database')\n     -\nrun();\n\n// alternatively you can take the result from DockerRun task:\n\n$result = $this-\ntaskDockerRun('db')\n     -\nexec('./prepare_database.sh')\n     -\nrun();\n\n$task-\ndockerCommit($result)\n     -\nname('my/database')\n     -\nrun();\n\n\n\n\n\n\nname($name)\n \n\n\ndir($dir)\n  changes working directory of command\n\n\nprinted($arg)\n  Should command output be printed\n\n\narg($arg)\n  Pass argument to executable\n\n\nargs($args)\n  Pass methods parameters as arguments to executable\n\n\noption($option, $value = null)\n  Pass option to executable. Options are prefixed with \n--\n , value can be provided in second parameter.\n\n\noptionList($option, $value = null)\n  Pass multiple options to executable. Value can be a string or array.\n\n\n\n\nExec\n\n\nExecutes command inside running Docker container\n\n\n?php\n$test = $this-\ntaskDockerRun('test_env')\n     -\ndetached()\n     -\nrun();\n\n$this-\ntaskDockerExec($test)\n     -\ninteractive()\n     -\nexec('./runtests')\n     -\nrun();\n\n// alternatively use commands from other tasks\n\n$this-\ntaskDockerExec($test)\n     -\ninteractive()\n     -\nexec($this-\ntaskCodecept()-\nsuite('acceptance'))\n     -\nrun();\n?\n\n\n\n\n\n\n\ndetached()\n \n\n\ninteractive()\n \n\n\nexec($command)\n \n\n\ndir($dir)\n  changes working directory of command\n\n\nprinted($arg)\n  Should command output be printed\n\n\narg($arg)\n  Pass argument to executable\n\n\nargs($args)\n  Pass methods parameters as arguments to executable\n\n\noption($option, $value = null)\n  Pass option to executable. Options are prefixed with \n--\n , value can be provided in second parameter.\n\n\noptionList($option, $value = null)\n  Pass multiple options to executable. Value can be a string or array.\n\n\n\n\nPull\n\n\nPulls an image from DockerHub\n\n\n?php\n$this-\ntaskDockerPull('wordpress')\n     -\nrun();\n\n?\n\n\n\n\n\n\n\ndir($dir)\n  changes working directory of command\n\n\nprinted($arg)\n  Should command output be printed\n\n\narg($arg)\n  Pass argument to executable\n\n\nargs($args)\n  Pass methods parameters as arguments to executable\n\n\noption($option, $value = null)\n  Pass option to executable. Options are prefixed with \n--\n , value can be provided in second parameter.\n\n\noptionList($option, $value = null)\n  Pass multiple options to executable. Value can be a string or array.\n\n\n\n\nRemove\n\n\nRemove docker container\n\n\n?php\n$this-\ntaskDockerRemove($container)\n     -\nrun();\n?\n\n\n\n\n\n\n\ndir($dir)\n  changes working directory of command\n\n\nprinted($arg)\n  Should command output be printed\n\n\narg($arg)\n  Pass argument to executable\n\n\nargs($args)\n  Pass methods parameters as arguments to executable\n\n\noption($option, $value = null)\n  Pass option to executable. Options are prefixed with \n--\n , value can be provided in second parameter.\n\n\noptionList($option, $value = null)\n  Pass multiple options to executable. Value can be a string or array.\n\n\n\n\nRun\n\n\nPerforms \ndocker run\n on a container.\n\n\n?php\n$this-\ntaskDockerRun('mysql')-\nrun();\n\n$result = $this-\ntaskDockerRun('my_db_image')\n     -\nenv('DB', 'database_name')\n     -\nvolume('/path/to/data', '/data')\n     -\ndetached()\n     -\npublish(3306)\n     -\nname('my_mysql')\n     -\nrun();\n\n// retrieve container's cid:\n$this-\nsay(\nRunning container \n.$result-\ngetCid());\n\n// execute script inside container\n$result = $this-\ntaskDockerRun('db')\n     -\nexec('prepare_test_data.sh')\n     -\nrun();\n\n$this-\ntaskDockerCommit($result)\n     -\nname('test_db')\n     -\nrun();\n\n// link containers\n$mysql = $this-\ntaskDockerRun('mysql')\n     -\nname('wp_db') // important to set name for linked container\n     -\nenv('MYSQL_ROOT_PASSWORD', '123456')\n     -\nrun();\n\n$this-\ntaskDockerRun('wordpress')\n     -\nlink($mysql)\n     -\npublish(80, 8080)\n     -\ndetached()\n     -\nrun();\n\n?\n\n\n\n\n\n\n\ndetached()\n \n\n\ninteractive()\n \n\n\nexec($run)\n \n\n\nvolume($from, $to = null)\n \n\n\nenv($variable, $value = null)\n \n\n\npublish($port = null, $portTo = null)\n \n\n\ncontainerWorkdir($dir)\n \n\n\nuser($user)\n \n\n\nprivileged()\n \n\n\nname($name)\n \n\n\nlink($name, $alias)\n \n\n\ndir($dir)\n  changes working directory of command\n\n\nprinted($arg)\n  Should command output be printed\n\n\narg($arg)\n  Pass argument to executable\n\n\nargs($args)\n  Pass methods parameters as arguments to executable\n\n\noption($option, $value = null)\n  Pass option to executable. Options are prefixed with \n--\n , value can be provided in second parameter.\n\n\noptionList($option, $value = null)\n  Pass multiple options to executable. Value can be a string or array.\n\n\n\n\nStart\n\n\nStarts Docker container\n\n\n?php\n$this-\ntaskDockerStart($cidOrResult)\n     -\nrun();\n?\n\n\n\n\n\n\n\ndir($dir)\n  changes working directory of command\n\n\nprinted($arg)\n  Should command output be printed\n\n\narg($arg)\n  Pass argument to executable\n\n\nargs($args)\n  Pass methods parameters as arguments to executable\n\n\noption($option, $value = null)\n  Pass option to executable. Options are prefixed with \n--\n , value can be provided in second parameter.\n\n\noptionList($option, $value = null)\n  Pass multiple options to executable. Value can be a string or array.\n\n\n\n\nStop\n\n\nStops Docker container\n\n\n?php\n$this-\ntaskDockerStop($cidOrResult)\n     -\nrun();\n?\n\n\n\n\n\n\n\ndir($dir)\n  changes working directory of command\n\n\nprinted($arg)\n  Should command output be printed\n\n\narg($arg)\n  Pass argument to executable\n\n\nargs($args)\n  Pass methods parameters as arguments to executable\n\n\noption($option, $value = null)\n  Pass option to executable. Options are prefixed with \n--\n , value can be provided in second parameter.\n\n\noptionList($option, $value = null)\n  Pass multiple options to executable. Value can be a string or array.", 
            "title": "Docker Tasks"
        }, 
        {
            "location": "/tasks/Docker/#docker-tasks", 
            "text": "", 
            "title": "Docker Tasks"
        }, 
        {
            "location": "/tasks/Docker/#build", 
            "text": "Builds Docker image  ?php\n$this- taskDockerBuild()- run();\n\n$this- taskDockerBuild('path/to/dir')\n     - tag('database')\n     - run();\n\n?   Class Build\n@package Robo\\Task\\Docker   tag($tag)    dir($dir)   changes working directory of command  printed($arg)   Should command output be printed  arg($arg)   Pass argument to executable  args($args)   Pass methods parameters as arguments to executable  option($option, $value = null)   Pass option to executable. Options are prefixed with  --  , value can be provided in second parameter.  optionList($option, $value = null)   Pass multiple options to executable. Value can be a string or array.", 
            "title": "Build"
        }, 
        {
            "location": "/tasks/Docker/#commit", 
            "text": "Commits docker container to an image  $this- taskDockerCommit($containerId)\n     - name('my/database')\n     - run();\n\n// alternatively you can take the result from DockerRun task:\n\n$result = $this- taskDockerRun('db')\n     - exec('./prepare_database.sh')\n     - run();\n\n$task- dockerCommit($result)\n     - name('my/database')\n     - run();   name($name)    dir($dir)   changes working directory of command  printed($arg)   Should command output be printed  arg($arg)   Pass argument to executable  args($args)   Pass methods parameters as arguments to executable  option($option, $value = null)   Pass option to executable. Options are prefixed with  --  , value can be provided in second parameter.  optionList($option, $value = null)   Pass multiple options to executable. Value can be a string or array.", 
            "title": "Commit"
        }, 
        {
            "location": "/tasks/Docker/#exec", 
            "text": "Executes command inside running Docker container  ?php\n$test = $this- taskDockerRun('test_env')\n     - detached()\n     - run();\n\n$this- taskDockerExec($test)\n     - interactive()\n     - exec('./runtests')\n     - run();\n\n// alternatively use commands from other tasks\n\n$this- taskDockerExec($test)\n     - interactive()\n     - exec($this- taskCodecept()- suite('acceptance'))\n     - run();\n?    detached()    interactive()    exec($command)    dir($dir)   changes working directory of command  printed($arg)   Should command output be printed  arg($arg)   Pass argument to executable  args($args)   Pass methods parameters as arguments to executable  option($option, $value = null)   Pass option to executable. Options are prefixed with  --  , value can be provided in second parameter.  optionList($option, $value = null)   Pass multiple options to executable. Value can be a string or array.", 
            "title": "Exec"
        }, 
        {
            "location": "/tasks/Docker/#pull", 
            "text": "Pulls an image from DockerHub  ?php\n$this- taskDockerPull('wordpress')\n     - run();\n\n?    dir($dir)   changes working directory of command  printed($arg)   Should command output be printed  arg($arg)   Pass argument to executable  args($args)   Pass methods parameters as arguments to executable  option($option, $value = null)   Pass option to executable. Options are prefixed with  --  , value can be provided in second parameter.  optionList($option, $value = null)   Pass multiple options to executable. Value can be a string or array.", 
            "title": "Pull"
        }, 
        {
            "location": "/tasks/Docker/#remove", 
            "text": "Remove docker container  ?php\n$this- taskDockerRemove($container)\n     - run();\n?    dir($dir)   changes working directory of command  printed($arg)   Should command output be printed  arg($arg)   Pass argument to executable  args($args)   Pass methods parameters as arguments to executable  option($option, $value = null)   Pass option to executable. Options are prefixed with  --  , value can be provided in second parameter.  optionList($option, $value = null)   Pass multiple options to executable. Value can be a string or array.", 
            "title": "Remove"
        }, 
        {
            "location": "/tasks/Docker/#run", 
            "text": "Performs  docker run  on a container.  ?php\n$this- taskDockerRun('mysql')- run();\n\n$result = $this- taskDockerRun('my_db_image')\n     - env('DB', 'database_name')\n     - volume('/path/to/data', '/data')\n     - detached()\n     - publish(3306)\n     - name('my_mysql')\n     - run();\n\n// retrieve container's cid:\n$this- say( Running container  .$result- getCid());\n\n// execute script inside container\n$result = $this- taskDockerRun('db')\n     - exec('prepare_test_data.sh')\n     - run();\n\n$this- taskDockerCommit($result)\n     - name('test_db')\n     - run();\n\n// link containers\n$mysql = $this- taskDockerRun('mysql')\n     - name('wp_db') // important to set name for linked container\n     - env('MYSQL_ROOT_PASSWORD', '123456')\n     - run();\n\n$this- taskDockerRun('wordpress')\n     - link($mysql)\n     - publish(80, 8080)\n     - detached()\n     - run();\n\n?    detached()    interactive()    exec($run)    volume($from, $to = null)    env($variable, $value = null)    publish($port = null, $portTo = null)    containerWorkdir($dir)    user($user)    privileged()    name($name)    link($name, $alias)    dir($dir)   changes working directory of command  printed($arg)   Should command output be printed  arg($arg)   Pass argument to executable  args($args)   Pass methods parameters as arguments to executable  option($option, $value = null)   Pass option to executable. Options are prefixed with  --  , value can be provided in second parameter.  optionList($option, $value = null)   Pass multiple options to executable. Value can be a string or array.", 
            "title": "Run"
        }, 
        {
            "location": "/tasks/Docker/#start", 
            "text": "Starts Docker container  ?php\n$this- taskDockerStart($cidOrResult)\n     - run();\n?    dir($dir)   changes working directory of command  printed($arg)   Should command output be printed  arg($arg)   Pass argument to executable  args($args)   Pass methods parameters as arguments to executable  option($option, $value = null)   Pass option to executable. Options are prefixed with  --  , value can be provided in second parameter.  optionList($option, $value = null)   Pass multiple options to executable. Value can be a string or array.", 
            "title": "Start"
        }, 
        {
            "location": "/tasks/Docker/#stop", 
            "text": "Stops Docker container  ?php\n$this- taskDockerStop($cidOrResult)\n     - run();\n?    dir($dir)   changes working directory of command  printed($arg)   Should command output be printed  arg($arg)   Pass argument to executable  args($args)   Pass methods parameters as arguments to executable  option($option, $value = null)   Pass option to executable. Options are prefixed with  --  , value can be provided in second parameter.  optionList($option, $value = null)   Pass multiple options to executable. Value can be a string or array.", 
            "title": "Stop"
        }, 
        {
            "location": "/tasks/File/", 
            "text": "File Tasks\n\n\nConcat\n\n\nMerges files into one. Used for preparing assets.\n\n\n?php\n$this-\ntaskConcat([\n     'web/assets/screen.css',\n     'web/assets/print.css',\n     'web/assets/theme.css'\n ])\n -\nto('web/assets/style.css')\n -\nrun()\n?\n\n\n\n\n\n\n\nto($dst)\n  set the destination file\n\n\n\n\nReplace\n\n\nPerforms search and replace inside a files.\n\n\n?php\n$this-\ntaskReplaceInFile('VERSION')\n -\nfrom('0.2.0')\n -\nto('0.3.0')\n -\nrun();\n\n$this-\ntaskReplaceInFile('README.md')\n -\nfrom(date('Y')-1)\n -\nto(date('Y'))\n -\nrun();\n\n$this-\ntaskReplaceInFile('config.yml')\n -\nregex('~^service:~')\n -\nto('services:')\n -\nrun();\n\n$this-\ntaskReplaceInFile('box/robo.txt')\n -\nfrom(array('##dbname##', '##dbhost##'))\n -\nto(array('robo', 'localhost'))\n -\nrun();\n?\n\n\n\n\n\n\n\nregex(string)\n  regex to match string to be replaced\n\n\nfrom(string|array)\n  string(s) to be replaced\n\n\n\n\nto(string|array)\n  value(s) to be set as a replacement\n\n\n\n\n\n\nfilename($filename)\n \n\n\n\n\nfrom($from)\n \n\n\nto($to)\n \n\n\nregex($regex)\n \n\n\n\n\nTmpFile\n\n\nCreate a temporary file that is automatically cleaned up\nonce the task collection is is part of completes. When created,\nit is given a random filename.\n\n\nThis temporary file may be manipulated exacatly like taskWrite().\nIt is deleted as soon as the collection it is a part of completes\nor rolls back.\n\n\n?php\n$collection = $this-\ncollectionBuilder();\n$tmpFilePath = $collection-\ntaskTmpFile()\n     -\nline('-----')\n     -\nline(date('Y-m-d').' '.$title)\n     -\nline('----')\n     -\ngetPath();\n$collection-\nrun();\n?\n\n\n\n\n\n\n\ncomplete()\n  Delete this file when our collection completes.\n\n\nfilename($filename)\n \n\n\nappend($append = null)\n \n\n\nline($line)\n  add a line.\n\n\nlines(array $lines)\n  add more lines.\n\n\ntext($text)\n  add a text.\n\n\ntextFromFile($filename)\n  add a text from a file.\n\n\nplace($name, $val)\n  substitute a placeholder with value, placeholder must be enclosed by \n{}\n.\n\n\nreplace($string, $replacement)\n  replace any string with value.\n\n\nregexReplace($pattern, $replacement)\n  replace any string with value using regular expression.\n\n\nappendIfMatches($pattern, $text)\n  Append the provided text to the end of the buffer if the provided\n\n\nappendUnlessMatches($pattern, $text)\n  Append the provided text to the end of the buffer unless the provided\n\n\noriginalContents()\n \n\n\nwouldChange()\n \n\n\ngetPath()\n \n\n\n\n\nWrite\n\n\nWrites to file.\n\n\n?php\n$this-\ntaskWriteToFile('blogpost.md')\n     -\nline('-----')\n     -\nline(date('Y-m-d').' '.$title)\n     -\nline('----')\n     -\nrun();\n?\n\n\n\n\n\n\n\n\n\nappend()\n \n\n\n\n\n\n\nfilename($filename)\n \n\n\n\n\nappend($append = null)\n \n\n\nline($line)\n  add a line.\n\n\nlines(array $lines)\n  add more lines.\n\n\ntext($text)\n  add a text.\n\n\ntextFromFile($filename)\n  add a text from a file.\n\n\nplace($name, $val)\n  substitute a placeholder with value, placeholder must be enclosed by \n{}\n.\n\n\nreplace($string, $replacement)\n  replace any string with value.\n\n\nregexReplace($pattern, $replacement)\n  replace any string with value using regular expression.\n\n\nappendIfMatches($pattern, $text)\n  Append the provided text to the end of the buffer if the provided\n\n\nappendUnlessMatches($pattern, $text)\n  Append the provided text to the end of the buffer unless the provided\n\n\noriginalContents()\n \n\n\nwouldChange()\n \n\n\ngetPath()", 
            "title": "File Tasks"
        }, 
        {
            "location": "/tasks/File/#file-tasks", 
            "text": "", 
            "title": "File Tasks"
        }, 
        {
            "location": "/tasks/File/#concat", 
            "text": "Merges files into one. Used for preparing assets.  ?php\n$this- taskConcat([\n     'web/assets/screen.css',\n     'web/assets/print.css',\n     'web/assets/theme.css'\n ])\n - to('web/assets/style.css')\n - run()\n?    to($dst)   set the destination file", 
            "title": "Concat"
        }, 
        {
            "location": "/tasks/File/#replace", 
            "text": "Performs search and replace inside a files.  ?php\n$this- taskReplaceInFile('VERSION')\n - from('0.2.0')\n - to('0.3.0')\n - run();\n\n$this- taskReplaceInFile('README.md')\n - from(date('Y')-1)\n - to(date('Y'))\n - run();\n\n$this- taskReplaceInFile('config.yml')\n - regex('~^service:~')\n - to('services:')\n - run();\n\n$this- taskReplaceInFile('box/robo.txt')\n - from(array('##dbname##', '##dbhost##'))\n - to(array('robo', 'localhost'))\n - run();\n?    regex(string)   regex to match string to be replaced  from(string|array)   string(s) to be replaced   to(string|array)   value(s) to be set as a replacement    filename($filename)     from($from)    to($to)    regex($regex)", 
            "title": "Replace"
        }, 
        {
            "location": "/tasks/File/#tmpfile", 
            "text": "Create a temporary file that is automatically cleaned up\nonce the task collection is is part of completes. When created,\nit is given a random filename.  This temporary file may be manipulated exacatly like taskWrite().\nIt is deleted as soon as the collection it is a part of completes\nor rolls back.  ?php\n$collection = $this- collectionBuilder();\n$tmpFilePath = $collection- taskTmpFile()\n     - line('-----')\n     - line(date('Y-m-d').' '.$title)\n     - line('----')\n     - getPath();\n$collection- run();\n?    complete()   Delete this file when our collection completes.  filename($filename)    append($append = null)    line($line)   add a line.  lines(array $lines)   add more lines.  text($text)   add a text.  textFromFile($filename)   add a text from a file.  place($name, $val)   substitute a placeholder with value, placeholder must be enclosed by  {} .  replace($string, $replacement)   replace any string with value.  regexReplace($pattern, $replacement)   replace any string with value using regular expression.  appendIfMatches($pattern, $text)   Append the provided text to the end of the buffer if the provided  appendUnlessMatches($pattern, $text)   Append the provided text to the end of the buffer unless the provided  originalContents()    wouldChange()    getPath()", 
            "title": "TmpFile"
        }, 
        {
            "location": "/tasks/File/#write", 
            "text": "Writes to file.  ?php\n$this- taskWriteToFile('blogpost.md')\n     - line('-----')\n     - line(date('Y-m-d').' '.$title)\n     - line('----')\n     - run();\n?     append()      filename($filename)     append($append = null)    line($line)   add a line.  lines(array $lines)   add more lines.  text($text)   add a text.  textFromFile($filename)   add a text from a file.  place($name, $val)   substitute a placeholder with value, placeholder must be enclosed by  {} .  replace($string, $replacement)   replace any string with value.  regexReplace($pattern, $replacement)   replace any string with value using regular expression.  appendIfMatches($pattern, $text)   Append the provided text to the end of the buffer if the provided  appendUnlessMatches($pattern, $text)   Append the provided text to the end of the buffer unless the provided  originalContents()    wouldChange()    getPath()", 
            "title": "Write"
        }, 
        {
            "location": "/tasks/Filesystem/", 
            "text": "FileSystem Tasks\n\n\nCleanDir\n\n\nDeletes all files from specified dir, ignoring git files.\n\n\n?php\n$this-\ntaskCleanDir(['tmp','logs'])-\nrun();\n// as shortcut\n$this-\n_cleanDir('app/cache');\n?\n\n\n\n\n\nCopyDir\n\n\nCopies one dir into another\n\n\n?php\n$this-\ntaskCopyDir(['dist/config' =\n 'config'])-\nrun();\n// as shortcut\n$this-\n_copyDir('dist/config', 'config');\n?\n\n\n\n\n\n\n\ndirPermissions($value)\n  Sets the default folder permissions for the destination if it doesn't exist\n\n\nexclude($exclude = null)\n  List files to exclude.\n\n\n\n\nDeleteDir\n\n\nDeletes dir\n\n\n?php\n$this-\ntaskDeleteDir('tmp')-\nrun();\n// as shortcut\n$this-\n_deleteDir(['tmp', 'log']);\n?\n\n\n\n\n\nFilesystemStack\n\n\nWrapper for \nSymfony Filesystem\n Component.\nComands are executed in stack and can be stopped on first fail with \nstopOnFail\n option.\n\n\n?php\n$this-\ntaskFilesystemStack()\n     -\nmkdir('logs')\n     -\ntouch('logs/.gitignore')\n     -\nchgrp('www', 'www-data')\n     -\nsymlink('/var/log/nginx/error.log', 'logs/error.log')\n     -\nrun();\n\n// one line\n$this-\n_touch('.gitignore');\n$this-\n_mkdir('logs');\n\n?\n\n\n\n\n\n\n\n$this mkdir($dir)\n \n\n\n$this touch($file)\n \n\n\n$this copy($from, $to, $force = null)\n \n\n\n$this chmod($file, $permissions, $umask = null, $recursive = null)\n \n\n\n$this chgrp($file, $group, $recursive = null)\n \n\n\n$this chown($file, $user, $recursive = null)\n \n\n\n$this remove($file)\n \n\n\n$this rename($from, $to)\n \n\n\n$this symlink($from, $to)\n \n\n\n\n\n$this mirror($from, $to)\n \n\n\n\n\n\n\nstopOnFail($stop = null)\n \n\n\n\n\n\n\nFlattenDir\n\n\nSearches for files in a nested directory structure and copies them to\na target directory with or without the parent directories. The task was\ninspired by \ngulp-flatten\n.\n\n\nExample directory structure:\n\n\n\u2514\u2500\u2500 assets\n    \u251c\u2500\u2500 asset-library1\n    \u2502   \u251c\u2500\u2500 README.md\n    \u2502   \u2514\u2500\u2500 asset-library1.min.js\n    \u2514\u2500\u2500 asset-library2\n        \u251c\u2500\u2500 README.md\n        \u2514\u2500\u2500 asset-library2.min.js\n\n\n\n\nThe following code will search the \n*.min.js\n files and copy them\ninside a new \ndist\n folder:\n\n\n?php\n$this-\ntaskFlattenDir(['assets/*.min.js' =\n 'dist'])-\nrun();\n// or use shortcut\n$this-\n_flattenDir('assets/*.min.js', 'dist');\n?\n\n\n\n\n\nYou can also define the target directory with an additional method, instead of\nkey/value pairs. More similar to the gulp-flatten syntax:\n\n\n?php\n$this-\ntaskFlattenDir(['assets/*.min.js'])\n  -\nto('dist')\n  -\nrun();\n?\n\n\n\n\n\nYou can also append parts of the parent directories to the target path. If you give\nthe value \n1\n to the \nincludeParents()\n method, then the top parent will be appended\nto the target directory resulting in a path such as \ndist/assets/asset-library1.min.js\n.\n\n\nIf you give a negative number, such as \n-1\n (the same as specifying \narray(0, 1)\n then\nthe bottom parent will be appended, resulting in a path such as\n\ndist/asset-library1/asset-library1.min.js\n.\n\n\nThe top parent directory will always be starting from the relative path to the current\ndirectory. You can override that with the \nparentDir()\n method. If in the above example\nyou would specify \nassets\n, then the top parent directory would be \nasset-library1\n.\n\n\n?php\n$this-\ntaskFlattenDir(['assets/*.min.js' =\n 'dist'])\n  -\nparentDir('assets')\n  -\nincludeParents(1)\n  -\nrun();\n?\n\n\n\n\n\n\n\ndirPermissions($permission)\n  Sets the default folder permissions for the destination if it does not exist.\n\n\nincludeParents($parents)\n  Sets the value from which direction and how much parent dirs should be included.\n\n\nparentDir($dir)\n  Sets the parent directory from which the relative parent directories will be calculated.\n\n\nto($target)\n  Sets the target directory where the files will be copied to.\n\n\n\n\nMirrorDir\n\n\nMirrors a directory to another\n\n\n?php\n$this-\ntaskMirrorDir(['dist/config/' =\n 'config/'])-\nrun();\n// or use shortcut\n$this-\n_mirrorDir('dist/config/', 'config/');\n\n?\n\n\n\n\n\nTmpDir\n\n\nCreate a temporary directory that is automatically cleaned up\nonce the task collection is is part of completes.\n\n\nUse WorkDir if you do not want the directory to be deleted.\n\n\n?php\n// Delete on rollback or on successful completion.\n// Note that in this example, everything is deleted at\n// the end of $collection-\nrun().\n$collection = $this-\ncollectionBuilder();\n$tmpPath = $collection-\ntmpDir()-\ngetPath();\n$collection-\ntaskFilesystemStack()\n          -\nmkdir(\n$tmpPath/log\n)\n          -\ntouch(\n$tmpPath/log/error.txt\n);\n$collection-\nrun();\n// as shortcut (deleted when program exits)\n$tmpPath = $this-\n_tmpDir();\n?\n\n\n\n\n\n\n\ncwd($shouldChangeWorkingDirectory = null)\n  Flag that we should cwd to the temporary directory when it is\n\n\ncomplete()\n  Delete this directory when our collection completes.\n\n\ngetPath()\n  Get a reference to the path to the temporary directory, so that\n\n\n\n\nWorkDir\n\n\nCreate a temporary working directory that is automatically renamed to its\nfinal desired location if all of the tasks in the collection succeed.  If\nthere is a rollback, then the working directory is deleted.\n\n\n?php\n$collection = $this-\ncollectionBuilder();\n$workingPath = $collection-\nworkDir(\nbuild\n)-\ngetPath();\n$collection-\ntaskFilesystemStack()\n          -\nmkdir(\n$workingPath/log\n)\n          -\ntouch(\n$workingPath/log/error.txt\n);\n$collection-\nrun();\n?\n\n\n\n\n\n\n\ncomplete()\n  Move our working directory into its final destination once the\n\n\nrollback()\n  Delete our working directory\n\n\ngetPath()\n  Get a reference to the path to the temporary directory, so that\n\n\ncwd($shouldChangeWorkingDirectory = null)\n  Flag that we should cwd to the temporary directory when it is", 
            "title": "Filesystem Tasks"
        }, 
        {
            "location": "/tasks/Filesystem/#filesystem-tasks", 
            "text": "", 
            "title": "FileSystem Tasks"
        }, 
        {
            "location": "/tasks/Filesystem/#cleandir", 
            "text": "Deletes all files from specified dir, ignoring git files.  ?php\n$this- taskCleanDir(['tmp','logs'])- run();\n// as shortcut\n$this- _cleanDir('app/cache');\n?", 
            "title": "CleanDir"
        }, 
        {
            "location": "/tasks/Filesystem/#copydir", 
            "text": "Copies one dir into another  ?php\n$this- taskCopyDir(['dist/config' =  'config'])- run();\n// as shortcut\n$this- _copyDir('dist/config', 'config');\n?    dirPermissions($value)   Sets the default folder permissions for the destination if it doesn't exist  exclude($exclude = null)   List files to exclude.", 
            "title": "CopyDir"
        }, 
        {
            "location": "/tasks/Filesystem/#deletedir", 
            "text": "Deletes dir  ?php\n$this- taskDeleteDir('tmp')- run();\n// as shortcut\n$this- _deleteDir(['tmp', 'log']);\n?", 
            "title": "DeleteDir"
        }, 
        {
            "location": "/tasks/Filesystem/#filesystemstack", 
            "text": "Wrapper for  Symfony Filesystem  Component.\nComands are executed in stack and can be stopped on first fail with  stopOnFail  option.  ?php\n$this- taskFilesystemStack()\n     - mkdir('logs')\n     - touch('logs/.gitignore')\n     - chgrp('www', 'www-data')\n     - symlink('/var/log/nginx/error.log', 'logs/error.log')\n     - run();\n\n// one line\n$this- _touch('.gitignore');\n$this- _mkdir('logs');\n\n?    $this mkdir($dir)    $this touch($file)    $this copy($from, $to, $force = null)    $this chmod($file, $permissions, $umask = null, $recursive = null)    $this chgrp($file, $group, $recursive = null)    $this chown($file, $user, $recursive = null)    $this remove($file)    $this rename($from, $to)    $this symlink($from, $to)     $this mirror($from, $to)      stopOnFail($stop = null)", 
            "title": "FilesystemStack"
        }, 
        {
            "location": "/tasks/Filesystem/#flattendir", 
            "text": "Searches for files in a nested directory structure and copies them to\na target directory with or without the parent directories. The task was\ninspired by  gulp-flatten .  Example directory structure:  \u2514\u2500\u2500 assets\n    \u251c\u2500\u2500 asset-library1\n    \u2502   \u251c\u2500\u2500 README.md\n    \u2502   \u2514\u2500\u2500 asset-library1.min.js\n    \u2514\u2500\u2500 asset-library2\n        \u251c\u2500\u2500 README.md\n        \u2514\u2500\u2500 asset-library2.min.js  The following code will search the  *.min.js  files and copy them\ninside a new  dist  folder:  ?php\n$this- taskFlattenDir(['assets/*.min.js' =  'dist'])- run();\n// or use shortcut\n$this- _flattenDir('assets/*.min.js', 'dist');\n?   You can also define the target directory with an additional method, instead of\nkey/value pairs. More similar to the gulp-flatten syntax:  ?php\n$this- taskFlattenDir(['assets/*.min.js'])\n  - to('dist')\n  - run();\n?   You can also append parts of the parent directories to the target path. If you give\nthe value  1  to the  includeParents()  method, then the top parent will be appended\nto the target directory resulting in a path such as  dist/assets/asset-library1.min.js .  If you give a negative number, such as  -1  (the same as specifying  array(0, 1)  then\nthe bottom parent will be appended, resulting in a path such as dist/asset-library1/asset-library1.min.js .  The top parent directory will always be starting from the relative path to the current\ndirectory. You can override that with the  parentDir()  method. If in the above example\nyou would specify  assets , then the top parent directory would be  asset-library1 .  ?php\n$this- taskFlattenDir(['assets/*.min.js' =  'dist'])\n  - parentDir('assets')\n  - includeParents(1)\n  - run();\n?    dirPermissions($permission)   Sets the default folder permissions for the destination if it does not exist.  includeParents($parents)   Sets the value from which direction and how much parent dirs should be included.  parentDir($dir)   Sets the parent directory from which the relative parent directories will be calculated.  to($target)   Sets the target directory where the files will be copied to.", 
            "title": "FlattenDir"
        }, 
        {
            "location": "/tasks/Filesystem/#mirrordir", 
            "text": "Mirrors a directory to another  ?php\n$this- taskMirrorDir(['dist/config/' =  'config/'])- run();\n// or use shortcut\n$this- _mirrorDir('dist/config/', 'config/');\n\n?", 
            "title": "MirrorDir"
        }, 
        {
            "location": "/tasks/Filesystem/#tmpdir", 
            "text": "Create a temporary directory that is automatically cleaned up\nonce the task collection is is part of completes.  Use WorkDir if you do not want the directory to be deleted.  ?php\n// Delete on rollback or on successful completion.\n// Note that in this example, everything is deleted at\n// the end of $collection- run().\n$collection = $this- collectionBuilder();\n$tmpPath = $collection- tmpDir()- getPath();\n$collection- taskFilesystemStack()\n          - mkdir( $tmpPath/log )\n          - touch( $tmpPath/log/error.txt );\n$collection- run();\n// as shortcut (deleted when program exits)\n$tmpPath = $this- _tmpDir();\n?    cwd($shouldChangeWorkingDirectory = null)   Flag that we should cwd to the temporary directory when it is  complete()   Delete this directory when our collection completes.  getPath()   Get a reference to the path to the temporary directory, so that", 
            "title": "TmpDir"
        }, 
        {
            "location": "/tasks/Filesystem/#workdir", 
            "text": "Create a temporary working directory that is automatically renamed to its\nfinal desired location if all of the tasks in the collection succeed.  If\nthere is a rollback, then the working directory is deleted.  ?php\n$collection = $this- collectionBuilder();\n$workingPath = $collection- workDir( build )- getPath();\n$collection- taskFilesystemStack()\n          - mkdir( $workingPath/log )\n          - touch( $workingPath/log/error.txt );\n$collection- run();\n?    complete()   Move our working directory into its final destination once the  rollback()   Delete our working directory  getPath()   Get a reference to the path to the temporary directory, so that  cwd($shouldChangeWorkingDirectory = null)   Flag that we should cwd to the temporary directory when it is", 
            "title": "WorkDir"
        }, 
        {
            "location": "/tasks/Gulp/", 
            "text": "Gulp Tasks\n\n\nRun\n\n\nGulp Run\n\n\n?php\n// simple execution\n$this-\ntaskGulpRun()-\nrun();\n\n// run task 'clean' with --silent option\n$this-\ntaskGulpRun('clean')\n     -\nsilent()\n     -\nrun();\n?\n\n\n\n\n\n\n\nsilent()\n  adds \nsilent\n option to gulp\n\n\nnoColor()\n  adds \n--no-color\n option to gulp\n\n\ncolor()\n  adds \n--color\n option to gulp\n\n\nsimple()\n  adds \n--tasks-simple\n option to gulp\n\n\ndir($dir)\n  changes working directory of command\n\n\nprinted($arg)\n  Should command output be printed\n\n\narg($arg)\n  Pass argument to executable\n\n\nargs($args)\n  Pass methods parameters as arguments to executable\n\n\noption($option, $value = null)\n  Pass option to executable. Options are prefixed with \n--\n , value can be provided in second parameter.\n\n\noptionList($option, $value = null)\n  Pass multiple options to executable. Value can be a string or array.", 
            "title": "Gulp Tasks"
        }, 
        {
            "location": "/tasks/Gulp/#gulp-tasks", 
            "text": "", 
            "title": "Gulp Tasks"
        }, 
        {
            "location": "/tasks/Gulp/#run", 
            "text": "Gulp Run  ?php\n// simple execution\n$this- taskGulpRun()- run();\n\n// run task 'clean' with --silent option\n$this- taskGulpRun('clean')\n     - silent()\n     - run();\n?    silent()   adds  silent  option to gulp  noColor()   adds  --no-color  option to gulp  color()   adds  --color  option to gulp  simple()   adds  --tasks-simple  option to gulp  dir($dir)   changes working directory of command  printed($arg)   Should command output be printed  arg($arg)   Pass argument to executable  args($args)   Pass methods parameters as arguments to executable  option($option, $value = null)   Pass option to executable. Options are prefixed with  --  , value can be provided in second parameter.  optionList($option, $value = null)   Pass multiple options to executable. Value can be a string or array.", 
            "title": "Run"
        }, 
        {
            "location": "/tasks/Npm/", 
            "text": "Npm Tasks\n\n\nInstall\n\n\nNpm Install\n\n\n?php\n// simple execution\n$this-\ntaskNpmInstall()-\nrun();\n\n// prefer dist with custom path\n$this-\ntaskNpmInstall('path/to/my/npm')\n     -\nnoDev()\n     -\nrun();\n?\n\n\n\n\n\n\n\nnoDev()\n  adds \nproduction\n option to npm\n\n\ndir($dir)\n  changes working directory of command\n\n\nprinted($arg)\n  Should command output be printed\n\n\narg($arg)\n  Pass argument to executable\n\n\nargs($args)\n  Pass methods parameters as arguments to executable\n\n\noption($option, $value = null)\n  Pass option to executable. Options are prefixed with \n--\n , value can be provided in second parameter.\n\n\noptionList($option, $value = null)\n  Pass multiple options to executable. Value can be a string or array.\n\n\n\n\nUpdate\n\n\nNpm Update\n\n\n?php\n// simple execution\n$this-\ntaskNpmUpdate()-\nrun();\n\n// prefer dist with custom path\n$this-\ntaskNpmUpdate('path/to/my/npm')\n     -\nnoDev()\n     -\nrun();\n?\n\n\n\n\n\n\n\nnoDev()\n  adds \nproduction\n option to npm\n\n\ndir($dir)\n  changes working directory of command\n\n\nprinted($arg)\n  Should command output be printed\n\n\narg($arg)\n  Pass argument to executable\n\n\nargs($args)\n  Pass methods parameters as arguments to executable\n\n\noption($option, $value = null)\n  Pass option to executable. Options are prefixed with \n--\n , value can be provided in second parameter.\n\n\noptionList($option, $value = null)\n  Pass multiple options to executable. Value can be a string or array.", 
            "title": "NPM Tasks"
        }, 
        {
            "location": "/tasks/Npm/#npm-tasks", 
            "text": "", 
            "title": "Npm Tasks"
        }, 
        {
            "location": "/tasks/Npm/#install", 
            "text": "Npm Install  ?php\n// simple execution\n$this- taskNpmInstall()- run();\n\n// prefer dist with custom path\n$this- taskNpmInstall('path/to/my/npm')\n     - noDev()\n     - run();\n?    noDev()   adds  production  option to npm  dir($dir)   changes working directory of command  printed($arg)   Should command output be printed  arg($arg)   Pass argument to executable  args($args)   Pass methods parameters as arguments to executable  option($option, $value = null)   Pass option to executable. Options are prefixed with  --  , value can be provided in second parameter.  optionList($option, $value = null)   Pass multiple options to executable. Value can be a string or array.", 
            "title": "Install"
        }, 
        {
            "location": "/tasks/Npm/#update", 
            "text": "Npm Update  ?php\n// simple execution\n$this- taskNpmUpdate()- run();\n\n// prefer dist with custom path\n$this- taskNpmUpdate('path/to/my/npm')\n     - noDev()\n     - run();\n?    noDev()   adds  production  option to npm  dir($dir)   changes working directory of command  printed($arg)   Should command output be printed  arg($arg)   Pass argument to executable  args($args)   Pass methods parameters as arguments to executable  option($option, $value = null)   Pass option to executable. Options are prefixed with  --  , value can be provided in second parameter.  optionList($option, $value = null)   Pass multiple options to executable. Value can be a string or array.", 
            "title": "Update"
        }, 
        {
            "location": "/tasks/Remote/", 
            "text": "Remote Tasks\n\n\nRsync\n\n\nExecutes rsync in a flexible manner.\n\n\n$this-\ntaskRsync()\n  -\nfromPath('src/')\n  -\ntoHost('localhost')\n  -\ntoUser('dev')\n  -\ntoPath('/var/www/html/app/')\n  -\nremoteShell('ssh -i public_key')\n  -\nrecursive()\n  -\nexcludeVcs()\n  -\nchecksum()\n  -\nwholeFile()\n  -\nverbose()\n  -\nprogress()\n  -\nhumanReadable()\n  -\nstats()\n  -\nrun();\n\n\n\n\nYou could also clone the task and do a dry-run first:\n\n\n$rsync = $this-\ntaskRsync()\n  -\nfromPath('src/')\n  -\ntoPath('example.com:/var/www/html/app/')\n  -\narchive()\n  -\nexcludeVcs()\n  -\nprogress()\n  -\nstats();\n\n$dryRun = clone $rsync;\n$dryRun-\ndryRun()-\nrun();\nif ('y' === $this-\nask('Do you want to run (y/n)')) {\n  $rsync-\nrun();\n}\n\n\n\n\n\n\nfromUser(string $user)\n \n\n\nfromHost(string $hostname)\n \n\n\ntoUser(string $user)\n \n\n\n\n\ntoHost(string $hostname)\n \n\n\n\n\n\n\nfromPath($path)\n  This can either be a full rsync path spec (user@host:path) or just a path.\n\n\n\n\ntoPath($path)\n  This can either be a full rsync path spec (user@host:path) or just a path.\n\n\nfromUser($fromUser)\n \n\n\nfromHost($fromHost)\n \n\n\ntoUser($toUser)\n \n\n\ntoHost($toHost)\n \n\n\nprogress()\n \n\n\nstats()\n \n\n\nrecursive()\n \n\n\nverbose()\n \n\n\nchecksum()\n \n\n\narchive()\n \n\n\ncompress()\n \n\n\nowner()\n \n\n\ngroup()\n \n\n\ntimes()\n \n\n\ndelete()\n \n\n\ntimeout($seconds)\n \n\n\nhumanReadable()\n \n\n\nwholeFile()\n \n\n\ndryRun()\n \n\n\nitemizeChanges()\n \n\n\nexcludeVcs()\n  Excludes .git, .svn and .hg items at any depth.\n\n\nexclude($pattern)\n \n\n\nexcludeFrom($file)\n \n\n\nincludeFilter($pattern)\n \n\n\nfilter($pattern)\n \n\n\nfilesFrom($file)\n \n\n\nremoteShell($command)\n \n\n\ndir($dir)\n  changes working directory of command\n\n\nprinted($arg)\n  Should command output be printed\n\n\narg($arg)\n  Pass argument to executable\n\n\nargs($args)\n  Pass methods parameters as arguments to executable\n\n\noption($option, $value = null)\n  Pass option to executable. Options are prefixed with \n--\n , value can be provided in second parameter.\n\n\noptionList($option, $value = null)\n  Pass multiple options to executable. Value can be a string or array.\n\n\n\n\nSsh\n\n\nRuns multiple commands on a remote server.\nPer default, commands are combined with \n, unless stopOnFail is false.\n\n\n?php\n\n$this-\ntaskSshExec('remote.example.com', 'user')\n    -\nremoteDir('/var/www/html')\n    -\nexec('ls -la')\n    -\nexec('chmod g+x logs')\n    -\nrun();\n\n\n\n\n\nYou can even exec other tasks (which implement CommandInterface):\n\n\n$gitTask = $this-\ntaskGitStack()\n    -\ncheckout('master')\n    -\npull();\n\n$this-\ntaskSshExec('remote.example.com')\n    -\nremoteDir('/var/www/html/site')\n    -\nexec($gitTask)\n    -\nrun();\n\n\n\n\nYou can configure the remote directory for all future calls:\n\n\n::configure('remoteDir', '/some-dir');\n\n\n\n\n\n\n$this stopOnFail(bool $stopOnFail)\n  Whether or not to chain commands together with \n\n                                           and stop the chain if one command fails\n\n\n\n\n$this remoteDir(string $remoteWorkingDirectory)\n  Changes to the given directory before running commands\n\n\n\n\n\n\nhostname($hostname)\n \n\n\n\n\nuser($user)\n \n\n\nstopOnFail($stopOnFail = null)\n \n\n\nremoteDir($remoteDir)\n \n\n\nidentityFile($filename)\n \n\n\nport($port)\n \n\n\nforcePseudoTty()\n \n\n\nquiet()\n \n\n\nverbose()\n \n\n\nexec($command)\n   * \nparam string|CommandInterface\n $command\n\n\ndir($dir)\n  changes working directory of command\n\n\nprinted($arg)\n  Should command output be printed\n\n\narg($arg)\n  Pass argument to executable\n\n\nargs($args)\n  Pass methods parameters as arguments to executable\n\n\noption($option, $value = null)\n  Pass option to executable. Options are prefixed with \n--\n , value can be provided in second parameter.\n\n\noptionList($option, $value = null)\n  Pass multiple options to executable. Value can be a string or array.", 
            "title": "SSH, Rsync Tasks"
        }, 
        {
            "location": "/tasks/Remote/#remote-tasks", 
            "text": "", 
            "title": "Remote Tasks"
        }, 
        {
            "location": "/tasks/Remote/#rsync", 
            "text": "Executes rsync in a flexible manner.  $this- taskRsync()\n  - fromPath('src/')\n  - toHost('localhost')\n  - toUser('dev')\n  - toPath('/var/www/html/app/')\n  - remoteShell('ssh -i public_key')\n  - recursive()\n  - excludeVcs()\n  - checksum()\n  - wholeFile()\n  - verbose()\n  - progress()\n  - humanReadable()\n  - stats()\n  - run();  You could also clone the task and do a dry-run first:  $rsync = $this- taskRsync()\n  - fromPath('src/')\n  - toPath('example.com:/var/www/html/app/')\n  - archive()\n  - excludeVcs()\n  - progress()\n  - stats();\n\n$dryRun = clone $rsync;\n$dryRun- dryRun()- run();\nif ('y' === $this- ask('Do you want to run (y/n)')) {\n  $rsync- run();\n}   fromUser(string $user)    fromHost(string $hostname)    toUser(string $user)     toHost(string $hostname)      fromPath($path)   This can either be a full rsync path spec (user@host:path) or just a path.   toPath($path)   This can either be a full rsync path spec (user@host:path) or just a path.  fromUser($fromUser)    fromHost($fromHost)    toUser($toUser)    toHost($toHost)    progress()    stats()    recursive()    verbose()    checksum()    archive()    compress()    owner()    group()    times()    delete()    timeout($seconds)    humanReadable()    wholeFile()    dryRun()    itemizeChanges()    excludeVcs()   Excludes .git, .svn and .hg items at any depth.  exclude($pattern)    excludeFrom($file)    includeFilter($pattern)    filter($pattern)    filesFrom($file)    remoteShell($command)    dir($dir)   changes working directory of command  printed($arg)   Should command output be printed  arg($arg)   Pass argument to executable  args($args)   Pass methods parameters as arguments to executable  option($option, $value = null)   Pass option to executable. Options are prefixed with  --  , value can be provided in second parameter.  optionList($option, $value = null)   Pass multiple options to executable. Value can be a string or array.", 
            "title": "Rsync"
        }, 
        {
            "location": "/tasks/Remote/#ssh", 
            "text": "Runs multiple commands on a remote server.\nPer default, commands are combined with  , unless stopOnFail is false.  ?php\n\n$this- taskSshExec('remote.example.com', 'user')\n    - remoteDir('/var/www/html')\n    - exec('ls -la')\n    - exec('chmod g+x logs')\n    - run();  You can even exec other tasks (which implement CommandInterface):  $gitTask = $this- taskGitStack()\n    - checkout('master')\n    - pull();\n\n$this- taskSshExec('remote.example.com')\n    - remoteDir('/var/www/html/site')\n    - exec($gitTask)\n    - run();  You can configure the remote directory for all future calls:  ::configure('remoteDir', '/some-dir');   $this stopOnFail(bool $stopOnFail)   Whether or not to chain commands together with  \n                                           and stop the chain if one command fails   $this remoteDir(string $remoteWorkingDirectory)   Changes to the given directory before running commands    hostname($hostname)     user($user)    stopOnFail($stopOnFail = null)    remoteDir($remoteDir)    identityFile($filename)    port($port)    forcePseudoTty()    quiet()    verbose()    exec($command)    *  param string|CommandInterface  $command  dir($dir)   changes working directory of command  printed($arg)   Should command output be printed  arg($arg)   Pass argument to executable  args($args)   Pass methods parameters as arguments to executable  option($option, $value = null)   Pass option to executable. Options are prefixed with  --  , value can be provided in second parameter.  optionList($option, $value = null)   Pass multiple options to executable. Value can be a string or array.", 
            "title": "Ssh"
        }, 
        {
            "location": "/tasks/Testing/", 
            "text": "Testing Tasks\n\n\nAtoum\n\n\nRuns \natoum\n tests\n\n\n?php\n$this-\ntaskAtoum()\n -\nfiles('path/to/test.php')\n -\nconfigFile('config/dev.php')\n -\nrun()\n\n?\n\n\n\n\n\n\n\ntags($tags)\n  Tag or Tags to filter.\n\n\nlightReport()\n  Display result using the light reporter.\n\n\ntap()\n  Display result using the tap reporter.\n\n\nbootstrap($file)\n  Path to the bootstrap file.\n\n\nconfigFile($file)\n  Path to the config file.\n\n\ndebug()\n  Use atoum's debug mode.\n\n\nfiles($files)\n  Test file or test files to run.\n\n\ndirectories($directories)\n  Test directory or directories to run.\n\n\ndir($dir)\n  changes working directory of command\n\n\nprinted($arg)\n  Should command output be printed\n\n\narg($arg)\n  Pass argument to executable\n\n\nargs($args)\n  Pass methods parameters as arguments to executable\n\n\noption($option, $value = null)\n  Pass option to executable. Options are prefixed with \n--\n , value can be provided in second parameter.\n\n\noptionList($option, $value = null)\n  Pass multiple options to executable. Value can be a string or array.\n\n\n\n\nCodecept\n\n\nExecutes Codeception tests\n\n\n?php\n// config\n$this-\ntaskCodecept()\n     -\nsuite('acceptance')\n     -\nenv('chrome')\n     -\ngroup('admin')\n     -\nxml()\n     -\nhtml()\n     -\nrun();\n\n?\n\n\n\n\n\n\n\nsuite($suite)\n \n\n\ntest($testName)\n \n\n\ngroup($group)\n  set group option. Can be called multiple times\n\n\nexcludeGroup($group)\n \n\n\njson($file = null)\n  generate json report\n\n\nxml($file = null)\n  generate xml JUnit report\n\n\nhtml($dir = null)\n  Generate html report\n\n\ntap($file = null)\n  generate tap report\n\n\nconfigFile($file)\n  provides config file other then default \ncodeception.yml\n with \n-c\n option\n\n\ncoverage($cov = null)\n  collect codecoverage in raw format. You may pass name of cov file to save results\n\n\nsilent()\n  execute in silent mode\n\n\ncoverageXml($xml = null)\n  collect code coverage in xml format. You may pass name of xml file to save results\n\n\ncoverageHtml($html = null)\n  collect code coverage and generate html report. You may pass\n\n\nenv($env)\n \n\n\ndebug()\n \n\n\ndir($dir)\n  changes working directory of command\n\n\nprinted($arg)\n  Should command output be printed\n\n\narg($arg)\n  Pass argument to executable\n\n\nargs($args)\n  Pass methods parameters as arguments to executable\n\n\noption($option, $value = null)\n  Pass option to executable. Options are prefixed with \n--\n , value can be provided in second parameter.\n\n\noptionList($option, $value = null)\n  Pass multiple options to executable. Value can be a string or array.\n\n\n\n\nPHPUnit\n\n\nRuns PHPUnit tests\n\n\n?php\n$this-\ntaskPHPUnit()\n -\ngroup('core')\n -\nbootstrap('test/bootstrap.php')\n -\nrun()\n\n?\n\n\n\n\n\n\n\nfilter($filter)\n \n\n\ngroup($group)\n \n\n\nexcludeGroup($group)\n \n\n\njson($file = null)\n  adds \nlog-json\n option to runner\n\n\nxml($file = null)\n  adds \nlog-junit\n option\n\n\ntap($file = null)\n \n\n\nbootstrap($file)\n \n\n\nconfigFile($file)\n \n\n\ndebug()\n \n\n\nfiles($files)\n  Test files to run.\n\n\ndir($dir)\n  changes working directory of command\n\n\nprinted($arg)\n  Should command output be printed\n\n\narg($arg)\n  Pass argument to executable\n\n\nargs($args)\n  Pass methods parameters as arguments to executable\n\n\noption($option, $value = null)\n  Pass option to executable. Options are prefixed with \n--\n , value can be provided in second parameter.\n\n\noptionList($option, $value = null)\n  Pass multiple options to executable. Value can be a string or array.\n\n\n\n\nPhpspec\n\n\nExecutes Phpspec tests\n\n\n?php\n$this-\ntaskPhpspec()\n     -\nformat('pretty')\n     -\nnoInteraction()\n     -\nrun();\n?\n\n\n\n\n\n\n\nstopOnFail()\n \n\n\nnoCodeGeneration()\n \n\n\nquiet()\n \n\n\nverbose($level = null)\n \n\n\nnoAnsi()\n \n\n\nnoInteraction()\n \n\n\nconfig($config_file)\n \n\n\nformat($formater)\n \n\n\ndir($dir)\n  changes working directory of command\n\n\nprinted($arg)\n  Should command output be printed\n\n\narg($arg)\n  Pass argument to executable\n\n\nargs($args)\n  Pass methods parameters as arguments to executable\n\n\noption($option, $value = null)\n  Pass option to executable. Options are prefixed with \n--\n , value can be provided in second parameter.\n\n\noptionList($option, $value = null)\n  Pass multiple options to executable. Value can be a string or array.", 
            "title": "Testing Tasks"
        }, 
        {
            "location": "/tasks/Testing/#testing-tasks", 
            "text": "", 
            "title": "Testing Tasks"
        }, 
        {
            "location": "/tasks/Testing/#atoum", 
            "text": "Runs  atoum  tests  ?php\n$this- taskAtoum()\n - files('path/to/test.php')\n - configFile('config/dev.php')\n - run()\n\n?    tags($tags)   Tag or Tags to filter.  lightReport()   Display result using the light reporter.  tap()   Display result using the tap reporter.  bootstrap($file)   Path to the bootstrap file.  configFile($file)   Path to the config file.  debug()   Use atoum's debug mode.  files($files)   Test file or test files to run.  directories($directories)   Test directory or directories to run.  dir($dir)   changes working directory of command  printed($arg)   Should command output be printed  arg($arg)   Pass argument to executable  args($args)   Pass methods parameters as arguments to executable  option($option, $value = null)   Pass option to executable. Options are prefixed with  --  , value can be provided in second parameter.  optionList($option, $value = null)   Pass multiple options to executable. Value can be a string or array.", 
            "title": "Atoum"
        }, 
        {
            "location": "/tasks/Testing/#codecept", 
            "text": "Executes Codeception tests  ?php\n// config\n$this- taskCodecept()\n     - suite('acceptance')\n     - env('chrome')\n     - group('admin')\n     - xml()\n     - html()\n     - run();\n\n?    suite($suite)    test($testName)    group($group)   set group option. Can be called multiple times  excludeGroup($group)    json($file = null)   generate json report  xml($file = null)   generate xml JUnit report  html($dir = null)   Generate html report  tap($file = null)   generate tap report  configFile($file)   provides config file other then default  codeception.yml  with  -c  option  coverage($cov = null)   collect codecoverage in raw format. You may pass name of cov file to save results  silent()   execute in silent mode  coverageXml($xml = null)   collect code coverage in xml format. You may pass name of xml file to save results  coverageHtml($html = null)   collect code coverage and generate html report. You may pass  env($env)    debug()    dir($dir)   changes working directory of command  printed($arg)   Should command output be printed  arg($arg)   Pass argument to executable  args($args)   Pass methods parameters as arguments to executable  option($option, $value = null)   Pass option to executable. Options are prefixed with  --  , value can be provided in second parameter.  optionList($option, $value = null)   Pass multiple options to executable. Value can be a string or array.", 
            "title": "Codecept"
        }, 
        {
            "location": "/tasks/Testing/#phpunit", 
            "text": "Runs PHPUnit tests  ?php\n$this- taskPHPUnit()\n - group('core')\n - bootstrap('test/bootstrap.php')\n - run()\n\n?    filter($filter)    group($group)    excludeGroup($group)    json($file = null)   adds  log-json  option to runner  xml($file = null)   adds  log-junit  option  tap($file = null)    bootstrap($file)    configFile($file)    debug()    files($files)   Test files to run.  dir($dir)   changes working directory of command  printed($arg)   Should command output be printed  arg($arg)   Pass argument to executable  args($args)   Pass methods parameters as arguments to executable  option($option, $value = null)   Pass option to executable. Options are prefixed with  --  , value can be provided in second parameter.  optionList($option, $value = null)   Pass multiple options to executable. Value can be a string or array.", 
            "title": "PHPUnit"
        }, 
        {
            "location": "/tasks/Testing/#phpspec", 
            "text": "Executes Phpspec tests  ?php\n$this- taskPhpspec()\n     - format('pretty')\n     - noInteraction()\n     - run();\n?    stopOnFail()    noCodeGeneration()    quiet()    verbose($level = null)    noAnsi()    noInteraction()    config($config_file)    format($formater)    dir($dir)   changes working directory of command  printed($arg)   Should command output be printed  arg($arg)   Pass argument to executable  args($args)   Pass methods parameters as arguments to executable  option($option, $value = null)   Pass option to executable. Options are prefixed with  --  , value can be provided in second parameter.  optionList($option, $value = null)   Pass multiple options to executable. Value can be a string or array.", 
            "title": "Phpspec"
        }, 
        {
            "location": "/tasks/Vcs/", 
            "text": "Vcs Tasks\n\n\nGitStack\n\n\nRuns Git commands in stack. You can use \nstopOnFail()\n to point that stack should be terminated on first fail.\n\n\n?php\n$this-\ntaskGitStack()\n -\nstopOnFail()\n -\nadd('-A')\n -\ncommit('adding everything')\n -\npush('origin','master')\n -\ntag('0.6.0')\n -\npush('origin','0.6.0')\n -\nrun()\n\n$this-\ntaskGitStack()\n -\nstopOnFail()\n -\nadd('doc/*')\n -\ncommit('doc updated')\n -\npush()\n -\nrun();\n?\n\n\n\n\n\n\n\ncloneRepo($repo, $to = null)\n  Executes \ngit clone\n\n\nadd($pattern)\n  Executes \ngit add\n command with files to add pattern\n\n\ncommit($message, $options = null)\n  Executes \ngit commit\n command with a message\n\n\npull($origin = null, $branch = null)\n  Executes \ngit pull\n command.\n\n\npush($origin = null, $branch = null)\n  Executes \ngit push\n command\n\n\nmerge($branch)\n  Performs git merge\n\n\ncheckout($branch)\n  Executes \ngit checkout\n command\n\n\ntag($tag_name, $message = null)\n  Executes \ngit tag\n command\n\n\nexecutable($executable)\n \n\n\nexec($command)\n \n\n\nstopOnFail($stopOnFail = null)\n \n\n\nresult($result)\n \n\n\ndir($dir)\n  changes working directory of command\n\n\nprinted($arg)\n  Should command output be printed\n\n\n\n\nHgStack\n\n\nRuns hg commands in stack. You can use \nstopOnFail()\n to point that stack should be terminated on first fail.\n\n\n?php\n$this-\nhgStack\n -\ncloneRepo('https://bitbucket.org/durin42/hgsubversion')\n -\npull()\n -\nadd()\n -\ncommit('changed')\n -\npush()\n -\ntag('0.6.0')\n -\npush('0.6.0')\n -\nrun();\n?\n\n\n\n\n\n\n\ncloneRepo($repo, $to = null)\n  Executes \nhg clone\n\n\nadd($include = null, $exclude = null)\n  Executes \nhg add\n command with files to add by pattern\n\n\ncommit($message, $options = null)\n  Executes \nhg commit\n command with a message\n\n\npull($branch = null)\n  Executes \nhg pull\n command.\n\n\npush($branch = null)\n  Executes \nhg push\n command\n\n\nmerge($revision = null)\n  Performs hg merge\n\n\ntag($tag_name, $message = null)\n  Executes \nhg tag\n command\n\n\nexecutable($executable)\n \n\n\nexec($command)\n \n\n\nstopOnFail($stopOnFail = null)\n \n\n\nresult($result)\n \n\n\ndir($dir)\n  changes working directory of command\n\n\nprinted($arg)\n  Should command output be printed\n\n\n\n\nSvnStack\n\n\nRuns Svn commands in stack. You can use \nstopOnFail()\n to point that stack should be terminated on first fail.\n\n\n?php\n$this-\ntaskSvnStack()\n -\ncheckout('http://svn.collab.net/repos/svn/trunk')\n -\nrun()\n\n// alternatively\n$this-\n_svnCheckout('http://svn.collab.net/repos/svn/trunk');\n\n$this-\ntaskSvnStack('username', 'password')\n -\nstopOnFail()\n -\nupdate()\n -\nadd('doc/*')\n -\ncommit('doc updated')\n -\nrun();\n?\n\n\n\n\n\n\n\nupdate($path = null)\n  Updates \nsvn update\n command\n\n\nadd($pattern = null)\n  Executes \nsvn add\n command with files to add pattern\n\n\ncommit($message, $options = null)\n  Executes \nsvn commit\n command with a message\n\n\ncheckout($branch)\n  Executes \nsvn checkout\n command\n\n\nexecutable($executable)\n \n\n\nexec($command)\n \n\n\nstopOnFail($stopOnFail = null)\n \n\n\nresult($result)\n \n\n\ndir($dir)\n  changes working directory of command\n\n\nprinted($arg)\n  Should command output be printed", 
            "title": "VCS Tasks"
        }, 
        {
            "location": "/tasks/Vcs/#vcs-tasks", 
            "text": "", 
            "title": "Vcs Tasks"
        }, 
        {
            "location": "/tasks/Vcs/#gitstack", 
            "text": "Runs Git commands in stack. You can use  stopOnFail()  to point that stack should be terminated on first fail.  ?php\n$this- taskGitStack()\n - stopOnFail()\n - add('-A')\n - commit('adding everything')\n - push('origin','master')\n - tag('0.6.0')\n - push('origin','0.6.0')\n - run()\n\n$this- taskGitStack()\n - stopOnFail()\n - add('doc/*')\n - commit('doc updated')\n - push()\n - run();\n?    cloneRepo($repo, $to = null)   Executes  git clone  add($pattern)   Executes  git add  command with files to add pattern  commit($message, $options = null)   Executes  git commit  command with a message  pull($origin = null, $branch = null)   Executes  git pull  command.  push($origin = null, $branch = null)   Executes  git push  command  merge($branch)   Performs git merge  checkout($branch)   Executes  git checkout  command  tag($tag_name, $message = null)   Executes  git tag  command  executable($executable)    exec($command)    stopOnFail($stopOnFail = null)    result($result)    dir($dir)   changes working directory of command  printed($arg)   Should command output be printed", 
            "title": "GitStack"
        }, 
        {
            "location": "/tasks/Vcs/#hgstack", 
            "text": "Runs hg commands in stack. You can use  stopOnFail()  to point that stack should be terminated on first fail.  ?php\n$this- hgStack\n - cloneRepo('https://bitbucket.org/durin42/hgsubversion')\n - pull()\n - add()\n - commit('changed')\n - push()\n - tag('0.6.0')\n - push('0.6.0')\n - run();\n?    cloneRepo($repo, $to = null)   Executes  hg clone  add($include = null, $exclude = null)   Executes  hg add  command with files to add by pattern  commit($message, $options = null)   Executes  hg commit  command with a message  pull($branch = null)   Executes  hg pull  command.  push($branch = null)   Executes  hg push  command  merge($revision = null)   Performs hg merge  tag($tag_name, $message = null)   Executes  hg tag  command  executable($executable)    exec($command)    stopOnFail($stopOnFail = null)    result($result)    dir($dir)   changes working directory of command  printed($arg)   Should command output be printed", 
            "title": "HgStack"
        }, 
        {
            "location": "/tasks/Vcs/#svnstack", 
            "text": "Runs Svn commands in stack. You can use  stopOnFail()  to point that stack should be terminated on first fail.  ?php\n$this- taskSvnStack()\n - checkout('http://svn.collab.net/repos/svn/trunk')\n - run()\n\n// alternatively\n$this- _svnCheckout('http://svn.collab.net/repos/svn/trunk');\n\n$this- taskSvnStack('username', 'password')\n - stopOnFail()\n - update()\n - add('doc/*')\n - commit('doc updated')\n - run();\n?    update($path = null)   Updates  svn update  command  add($pattern = null)   Executes  svn add  command with files to add pattern  commit($message, $options = null)   Executes  svn commit  command with a message  checkout($branch)   Executes  svn checkout  command  executable($executable)    exec($command)    stopOnFail($stopOnFail = null)    result($result)    dir($dir)   changes working directory of command  printed($arg)   Should command output be printed", 
            "title": "SvnStack"
        }, 
        {
            "location": "/changelog/", 
            "text": "Changelog\n\n\n1.0.0\n\n\n\n\n[Collection] Add tasks to a collection, and implement them as a group with rollback\n\n\nTasks may be added to a collection via \n$collection-\nadd($task);\n\n\n$collection-\nrun();\n runs all tasks in the collection\n\n\n$collection-\naddCode(function () { ... } );\n to add arbitrary code to a collection\n\n\n$collection-\nprogressMessage(...);\n will log a message\n\n\n$collection-\nrollback($task);\n and \n$collection-\nrollbackCode($callable);\n add a rollback function to clean up after a failed task\n\n\n$collection-\ncompletion($task);\n and \n$collection-\ncompletionCode($callable);\n add a function that is called once the collection completes or rolls back.\n\n\n$collection-\nbefore();\n and \n$collection-\nafter();\n can be used to add a task or function that runs before or after (respectively) the specified named task. To use this feature, tasks must be given names via an optional \n$taskName\n parameter when they are added.\n\n\nCollections may be added to collections, if desired. \n\n\n[CollectionBuilder] Create tasks and add them to a collection in a single operation.\n\n\n$this-\ncollectionBuilder()-\ntaskExec('pwd')-\ntaskExec('ls')-\nrun()\n\n\nAdd output formatters\n\n\nIf a Robo command returns a string, or a \nResult\n object with a \n$message\n, then it will be printed\n\n\nCommands may be annotated to describe output formats that may be used\n\n\nStructured arrays returned from function results may be converted into different formats, such as a table, yml, json, etc.\n\n\nTasks must \nuse TaskIO\n for output methods. It is no longer possible to \nuse IO\n from a task. For direct access use \nRobo::output()\n (not recommended).   \n\n\nUse league/container to do Dependency Injection\n\n\nBreaking\n Tasks' loadTasks traits must use \n$this-\ntask(TaskClass::class);\n instead of \nnew TaskClass();\n\n\nBreaking\n Tasks that use other tasks must use \n$this-\ncollectionBuilder()-\ntaskName();\n instead of \nnew TaskClass();\n when creating task objects to call. Implement \nRobo\\Contract\\BuilderAwareInterface\n and use \nRobo\\Contract\\BuilderAwareTrait\n to add the \ncollectionBuilder()\n method to your task class.\n\n\n[Extract] task added\n\n\n[Pack] task added\n\n\n[TmpDir], [WorkDir] and [TmpFile] tasks added\n\n\nSupport Robo scripts that allows scripts starting with \n#!/usr/bin/env robo\n to define multiple robo commands.  Use \n#!/usr/bin/env robo run\n to define a single robo command implemented by the \nrun()\n method.\n\n\nProvide ProgresIndicatorAwareInterface and ProgressIndicatorAwareTrait that make it easy to add progress indicators to tasks\n\n\nAdd --simulate mode that causes tasks to print what they would have done, but make no changes\n\n\nAdd \nrobo generate:task\n code-generator to make new stack-based task wrappers around existing classes\n\n\nAdd \nrobo sniff\n by @dustinleblanc. Runs the PHP code sniffer followed by the code beautifier, if needed.\n\n\nImplement ArrayInterface for Result class, so result data may be accessed like an array \n\n\nBreaking\n taskWrite is now called taskWriteToFile\n\n\nDefer execution of operations in taskWriteToFile until the run() method\n\n\nAdd Write::textIfMatch() for taskWriteToFile\n\n\nResourceExistenceChecker used for error checking in DeleteDir, CopyDir, CleanDir and Concat tasks by @burzum\n\n\nProvide ResultData base class for Result; ResultData may be used in instances where a specific \n$task\n instance is not available (e.g. in a Robo command)\n\n\nArgvInput now available via $this-\ngetInput() in RoboFile by Thomas Spigel\n\n\nAdd optional message to git tag task by Tim Tegeler\n\n\nRename 'FileSystem' to 'Filesystem' wherever it occurs.\n\n\nCurrent directory is changed with \nchdir\n only if specified via the \n--load-from\n option (RC2)\n\n\n\n\n0.6.0\n\n\n\n\nAdded \n--load-from\n option to make Robo start RoboFiles from other directories. Use it like \nrobo --load-from /path/to/where/RobFile/located\n.\n\n\nRobo will not ask to create RoboFile if it does not exist, \ninit\n command should be used.\n\n\n[ImageMinify] task added by @gabor-udvari\n\n\n[OpenBrowser] task added by @oscarotero\n\n\n[FlattenDir] task added by @gabor-udvari\n\n\nRobo Runner can easily extended for custom runner by passing RoboClass and RoboFile parameters to constructor. By @rdeutz See #232\n\n\n\n\n0.5.4\n\n\n\n\n[WriteToFile] Fixed by @gabor-udvari: always writing to file regardless whether any changes were made or not. This can bring the taskrunner into an inifinite loop if a replaced file is being watched.\n\n\n[Scss] task added, requires \nleafo/scssphp\n library to compile by @gabor-udvari\n\n\n[PhpSpec] TAP formatter added by @orls\n\n\n[Less] Added ability to set import dir for less compilers by @MAXakaWIZARD\n\n\n[Less] fixed passing closure as compiler by @pr0nbaer\n\n\n[Sass] task added by \n2015-08-31\n\n\n\n\n0.5.3\n\n\n\n\n[Rsync] Ability to use remote shell with identity file by @Mihailoff\n\n\n[Less] Task added by @burzum\n\n\n[PHPUnit] allow to test specific files with \nfiles\n parameter by @burzum.\n\n\n[GitStack] \ntag\n added by @SebSept\n\n\n[Concat] Fixing concat, it breaks some files if there is no new line. @burzum \n2015-03-03-13\n\n\n[Minify] BC fix to support Jsqueeze 1.x and 2.x @burzum \n2015-03-12\n\n\n[PHPUnit] Replace log-xml with log-junit @vkunz \n2015-03-06\n\n\n[Minify] Making it possible to pass options to the JS minification @burzum \n2015-03-05\n\n\n[CopyDir] Create destination recursively @boedah \n2015-02-28\n\n\n\n\n0.5.2\n\n\n\n\n[Phar] do not compress phar if more than 1000 files included (causes internal PHP error) \n2015-02-24\n\n\n_copyDir and _mirrorDir shortcuts fixed by @boedah \n2015-02-24\n\n\n[File\\Write] methods replace() and regexReplace() added by @asterixcapri \n2015-02-24\n\n\n[Codecept] Allow to set custom name of coverage file raw name by @raistlin \n2015-02-24\n\n\n[Ssh] Added property \nremoteDir\n by @boedah \n2015-02-24\n\n\n[PhpServer] fixed passing arguments to server \n2015-02-24\n\n\n\n\n0.5.1\n\n\n\n\n[Exec] fixed execution of background jobs, processes persist till the end of PHP script \n2015-01-27\n\n\n[Ssh] Fixed SSH task by @Butochnikov \n2015-01-27\n\n\n[CopyDir] fixed shortcut usage by @boedah \n2015-01-27\n\n\nAdded default value options for Configuration trait by @TamasBarta \n2015-01-27\n\n\n\n\n0.5.0\n\n\nRefactored core\n\n\n\n\nAll traits moved to \nRobo\\Common\n namespace\n\n\nInterfaces moved to \nRobo\\Contract\n namespace\n\n\nAll task extend \nRobo\\Task\\BaseTask\n to use common IO.\n\n\nAll classes follow PSR-4 standard\n\n\nTasks are loaded into RoboFile with \nloadTasks\n trait\n\n\nOne-line tasks are available as shortcuts loaded by \nloadShortucts\n and used like \n$this-\n_exec('ls')\n\n\nRobo runner is less coupled. Output can be set by \n\\Robo\\Config::setOutput\n, \nRoboFile\n can be changed to any provided class.\n\n\nTasks can be used outside of Robo runner (inside a project)\n\n\nTimer for long-running tasks added\n\n\nTasks can be globally configured (WIP) via \nRobo\\Config\n class.\n\n\nUpdated to Symfony \n= 2.5\n\n\nIO methods added \naskHidden\n, \naskDefault\n, \nconfirm\n\n\nTaskIO methods added \nprintTaskError\n, \nprintTaskSuccess\n with different formatting.\n\n\n[Docker] Tasks added\n\n\n[Gulp] Task added by @schorsch3000\n\n\n\n\n0.4.7\n\n\n\n\n[Minify] Task added by @Rarst. Requires additional dependencies installed \n2014-12-26\n\n\nHelp command is populated from annotation\n by @jonsa \n2014-12-26\n\n\nAllow empty values as defaults to optional options by @jonsa \n2014-12-26\n\n\nPHP_WINDOWS_VERSION_BUILD\n constant is used to check for Windows in tasks by @boedah \n2014-12-26\n\n\n[Copy][EmptyDir] Fixed infinite loop by @boedah \n2014-12-26\n\n\n[ApiGen] Task added by @drobert \n2014-12-26\n\n\n[FileSystem] Equalized \ncopy\n and \nchmod\n argument to defaults by @Rarst (BC break) \n2014-12-26\n\n\n[FileSystem]  Added missing umask argument to chmod() method of FileSystemStack by @Rarst\n\n\n[SemVer] Fixed file read and exit code\n\n\n[Codeception] fixed codeception coverageHtml option by @gunfrank \n2014-12-26\n\n\n[phpspec] Task added by @SebSept \n2014-12-26\n\n\nShortcut options: if option name is like foo|f, assign f as shortcut by @jschnare \n2014-12-26\n\n\n[Rsync] Shell escape rsync exclude pattern by @boedah. Fixes #77 (BC break) \n2014-12-26\n\n\n[Npm] Task added by @AAlakkad \n2014-12-26\n\n\n\n\n0.4.6\n\n\n\n\n[Exec] Output from buffer is not spoiled by special chars \n2014-10-17\n\n\n[PHPUnit] detect PHPUnit on Windows or when is globally installed with Composer \n2014-10-17\n\n\nOutput: added methods askDefault and confirm by @bkawakami \n2014-10-17\n\n\n[Svn] Task added by @anvi \n2014-08-13\n\n\n[Stack] added dir and printed options \n2014-08-12\n\n\n[ExecTask] now uses Executable trait with printed, dir, arg, option methods added \n2014-08-12\n\n\n\n\n0.4.5\n\n\n\n\n[Watch] bugfix: Watch only tracks last file if given array of files #46 \n2014-08-05\n\n\nAll executable tasks can configure working directory with \ndir\n option\n\n\nIf no value for an option is provided, assume it's a VALUE_NONE option. #47 by @pfaocle\n\n\n[Changelog] changed style \n2014-06-27\n\n\n[GenMarkDown] fixed formatting annotations \n2014-06-27\n\n\n\n\n0.4.4 06/05/2014\n\n\n\n\nOutput can be disabled in all executable tasks by -\nprinted(false)\n\n\ndisabled timeouts by default in ParallelExec\n\n\nbetter descriptions for Result output\n\n\nchanged ParallelTask to display failed process in list\n\n\nChanged Output to be stored globally in Robo\\Runner class\n\n\nAdded \nSshTask\n by @boedah\n\n\nAdded \nRsyncTask\n by @boedah\n\n\nfalse option added to proceess* callbacks in GenMarkDownTask to skip processing\n\n\n\n\n0.4.3 05/21/2014\n\n\n\n\nadded \nSemVer\n task by \n@jadb\n\n\nyell\n output method added\n\n\ntask \nFileSystemStack\n added\n\n\nMirrorDirTask\n added by \n@devster\n\n\nswitched to Symfony Filesystem component\n\n\noptions can be used to commands\n\n\narray arguments can be used in commands\n\n\n\n\n0.4.2 05/09/2014\n\n\n\n\nask can now hide answers\n\n\nTrait Executable added to provide standard way for passing arguments and options\n\n\nadded ComposerDumpAutoload task by \n@pmcjury\n\n\nadded FileSystem task by \n@jadb\n\n\nadded CommonStack metatsk to have similar interface for all stacked tasks by \n@jadb\n\n\narguments and options can be passed into variable and used in exec task\n\n\npassing options into commands\n\n\n\n\n0.4.1 05/05/2014\n\n\n\n\n[BC] \ntaskGit\n task renamed to \ntaskGitStack\n for compatibility\n\n\nunit and functional tests added\n\n\nall command tasks now use Symfony\\Process to execute them\n\n\nenabled Bower and Concat tasks\n\n\nadded \nprinted\n param to Exec task\n\n\ncodeception \nsuite\n method now returns \n$this\n\n\ntimeout options added to Exec task\n\n\n\n\n0.4.0 04/27/2014\n\n\n\n\nCodeception task added\n\n\nPHPUnit task improved\n\n\nBower task added by @jadb\n\n\nParallelExec task added\n\n\nSymfony Process component used for execution\n\n\nTask descriptions taken from first line of annotations\n\n\nCommandInterface\n added to use tasks as parameters\n\n\n\n\n0.3.3 02/25/2014\n\n\n\n\nPHPUnit basic task\n\n\nfixed doc generation\n\n\n\n\n0.3.5 02/21/2014\n\n\n\n\nchanged generated init template\n\n\n\n\n0.3.4 02/21/2014\n\n\n\n\n[PackPhar] -\nexecutable command will remove hashbang when generated stub file\n\n\n[Git][Exec] stopOnFail option for Git and Exec stack\n\n\n[ExecStack] shortcut for executing bash commands in stack\n\n\n\n\n0.3.2 02/20/2014\n\n\n\n\nrelease process now includes phar\n\n\nphar executable method added\n\n\ngit checkout added\n\n\nphar pack created\n\n\n\n\n0.3.0 02/11/2014\n\n\n\n\nDynamic configuration via magic methods\n\n\nadded WriteToFile task\n\n\nResult class for managing exit codes and error messages\n\n\n\n\n0.2.0 01/29/2014\n\n\n\n\nMerged Tasks and Traits to same file\n\n\nAdded Watcher task\n\n\nAdded GitHubRelease task\n\n\nAdded Changelog task\n\n\nAdded ReplaceInFile task", 
            "title": "Releases"
        }, 
        {
            "location": "/changelog/#changelog", 
            "text": "", 
            "title": "Changelog"
        }, 
        {
            "location": "/changelog/#100", 
            "text": "[Collection] Add tasks to a collection, and implement them as a group with rollback  Tasks may be added to a collection via  $collection- add($task);  $collection- run();  runs all tasks in the collection  $collection- addCode(function () { ... } );  to add arbitrary code to a collection  $collection- progressMessage(...);  will log a message  $collection- rollback($task);  and  $collection- rollbackCode($callable);  add a rollback function to clean up after a failed task  $collection- completion($task);  and  $collection- completionCode($callable);  add a function that is called once the collection completes or rolls back.  $collection- before();  and  $collection- after();  can be used to add a task or function that runs before or after (respectively) the specified named task. To use this feature, tasks must be given names via an optional  $taskName  parameter when they are added.  Collections may be added to collections, if desired.   [CollectionBuilder] Create tasks and add them to a collection in a single operation.  $this- collectionBuilder()- taskExec('pwd')- taskExec('ls')- run()  Add output formatters  If a Robo command returns a string, or a  Result  object with a  $message , then it will be printed  Commands may be annotated to describe output formats that may be used  Structured arrays returned from function results may be converted into different formats, such as a table, yml, json, etc.  Tasks must  use TaskIO  for output methods. It is no longer possible to  use IO  from a task. For direct access use  Robo::output()  (not recommended).     Use league/container to do Dependency Injection  Breaking  Tasks' loadTasks traits must use  $this- task(TaskClass::class);  instead of  new TaskClass();  Breaking  Tasks that use other tasks must use  $this- collectionBuilder()- taskName();  instead of  new TaskClass();  when creating task objects to call. Implement  Robo\\Contract\\BuilderAwareInterface  and use  Robo\\Contract\\BuilderAwareTrait  to add the  collectionBuilder()  method to your task class.  [Extract] task added  [Pack] task added  [TmpDir], [WorkDir] and [TmpFile] tasks added  Support Robo scripts that allows scripts starting with  #!/usr/bin/env robo  to define multiple robo commands.  Use  #!/usr/bin/env robo run  to define a single robo command implemented by the  run()  method.  Provide ProgresIndicatorAwareInterface and ProgressIndicatorAwareTrait that make it easy to add progress indicators to tasks  Add --simulate mode that causes tasks to print what they would have done, but make no changes  Add  robo generate:task  code-generator to make new stack-based task wrappers around existing classes  Add  robo sniff  by @dustinleblanc. Runs the PHP code sniffer followed by the code beautifier, if needed.  Implement ArrayInterface for Result class, so result data may be accessed like an array   Breaking  taskWrite is now called taskWriteToFile  Defer execution of operations in taskWriteToFile until the run() method  Add Write::textIfMatch() for taskWriteToFile  ResourceExistenceChecker used for error checking in DeleteDir, CopyDir, CleanDir and Concat tasks by @burzum  Provide ResultData base class for Result; ResultData may be used in instances where a specific  $task  instance is not available (e.g. in a Robo command)  ArgvInput now available via $this- getInput() in RoboFile by Thomas Spigel  Add optional message to git tag task by Tim Tegeler  Rename 'FileSystem' to 'Filesystem' wherever it occurs.  Current directory is changed with  chdir  only if specified via the  --load-from  option (RC2)", 
            "title": "1.0.0"
        }, 
        {
            "location": "/changelog/#060", 
            "text": "Added  --load-from  option to make Robo start RoboFiles from other directories. Use it like  robo --load-from /path/to/where/RobFile/located .  Robo will not ask to create RoboFile if it does not exist,  init  command should be used.  [ImageMinify] task added by @gabor-udvari  [OpenBrowser] task added by @oscarotero  [FlattenDir] task added by @gabor-udvari  Robo Runner can easily extended for custom runner by passing RoboClass and RoboFile parameters to constructor. By @rdeutz See #232", 
            "title": "0.6.0"
        }, 
        {
            "location": "/changelog/#054", 
            "text": "[WriteToFile] Fixed by @gabor-udvari: always writing to file regardless whether any changes were made or not. This can bring the taskrunner into an inifinite loop if a replaced file is being watched.  [Scss] task added, requires  leafo/scssphp  library to compile by @gabor-udvari  [PhpSpec] TAP formatter added by @orls  [Less] Added ability to set import dir for less compilers by @MAXakaWIZARD  [Less] fixed passing closure as compiler by @pr0nbaer  [Sass] task added by  2015-08-31", 
            "title": "0.5.4"
        }, 
        {
            "location": "/changelog/#053", 
            "text": "[Rsync] Ability to use remote shell with identity file by @Mihailoff  [Less] Task added by @burzum  [PHPUnit] allow to test specific files with  files  parameter by @burzum.  [GitStack]  tag  added by @SebSept  [Concat] Fixing concat, it breaks some files if there is no new line. @burzum  2015-03-03-13  [Minify] BC fix to support Jsqueeze 1.x and 2.x @burzum  2015-03-12  [PHPUnit] Replace log-xml with log-junit @vkunz  2015-03-06  [Minify] Making it possible to pass options to the JS minification @burzum  2015-03-05  [CopyDir] Create destination recursively @boedah  2015-02-28", 
            "title": "0.5.3"
        }, 
        {
            "location": "/changelog/#052", 
            "text": "[Phar] do not compress phar if more than 1000 files included (causes internal PHP error)  2015-02-24  _copyDir and _mirrorDir shortcuts fixed by @boedah  2015-02-24  [File\\Write] methods replace() and regexReplace() added by @asterixcapri  2015-02-24  [Codecept] Allow to set custom name of coverage file raw name by @raistlin  2015-02-24  [Ssh] Added property  remoteDir  by @boedah  2015-02-24  [PhpServer] fixed passing arguments to server  2015-02-24", 
            "title": "0.5.2"
        }, 
        {
            "location": "/changelog/#051", 
            "text": "[Exec] fixed execution of background jobs, processes persist till the end of PHP script  2015-01-27  [Ssh] Fixed SSH task by @Butochnikov  2015-01-27  [CopyDir] fixed shortcut usage by @boedah  2015-01-27  Added default value options for Configuration trait by @TamasBarta  2015-01-27", 
            "title": "0.5.1"
        }, 
        {
            "location": "/changelog/#050", 
            "text": "Refactored core   All traits moved to  Robo\\Common  namespace  Interfaces moved to  Robo\\Contract  namespace  All task extend  Robo\\Task\\BaseTask  to use common IO.  All classes follow PSR-4 standard  Tasks are loaded into RoboFile with  loadTasks  trait  One-line tasks are available as shortcuts loaded by  loadShortucts  and used like  $this- _exec('ls')  Robo runner is less coupled. Output can be set by  \\Robo\\Config::setOutput ,  RoboFile  can be changed to any provided class.  Tasks can be used outside of Robo runner (inside a project)  Timer for long-running tasks added  Tasks can be globally configured (WIP) via  Robo\\Config  class.  Updated to Symfony  = 2.5  IO methods added  askHidden ,  askDefault ,  confirm  TaskIO methods added  printTaskError ,  printTaskSuccess  with different formatting.  [Docker] Tasks added  [Gulp] Task added by @schorsch3000", 
            "title": "0.5.0"
        }, 
        {
            "location": "/changelog/#047", 
            "text": "[Minify] Task added by @Rarst. Requires additional dependencies installed  2014-12-26  Help command is populated from annotation  by @jonsa  2014-12-26  Allow empty values as defaults to optional options by @jonsa  2014-12-26  PHP_WINDOWS_VERSION_BUILD  constant is used to check for Windows in tasks by @boedah  2014-12-26  [Copy][EmptyDir] Fixed infinite loop by @boedah  2014-12-26  [ApiGen] Task added by @drobert  2014-12-26  [FileSystem] Equalized  copy  and  chmod  argument to defaults by @Rarst (BC break)  2014-12-26  [FileSystem]  Added missing umask argument to chmod() method of FileSystemStack by @Rarst  [SemVer] Fixed file read and exit code  [Codeception] fixed codeception coverageHtml option by @gunfrank  2014-12-26  [phpspec] Task added by @SebSept  2014-12-26  Shortcut options: if option name is like foo|f, assign f as shortcut by @jschnare  2014-12-26  [Rsync] Shell escape rsync exclude pattern by @boedah. Fixes #77 (BC break)  2014-12-26  [Npm] Task added by @AAlakkad  2014-12-26", 
            "title": "0.4.7"
        }, 
        {
            "location": "/changelog/#046", 
            "text": "[Exec] Output from buffer is not spoiled by special chars  2014-10-17  [PHPUnit] detect PHPUnit on Windows or when is globally installed with Composer  2014-10-17  Output: added methods askDefault and confirm by @bkawakami  2014-10-17  [Svn] Task added by @anvi  2014-08-13  [Stack] added dir and printed options  2014-08-12  [ExecTask] now uses Executable trait with printed, dir, arg, option methods added  2014-08-12", 
            "title": "0.4.6"
        }, 
        {
            "location": "/changelog/#045", 
            "text": "[Watch] bugfix: Watch only tracks last file if given array of files #46  2014-08-05  All executable tasks can configure working directory with  dir  option  If no value for an option is provided, assume it's a VALUE_NONE option. #47 by @pfaocle  [Changelog] changed style  2014-06-27  [GenMarkDown] fixed formatting annotations  2014-06-27", 
            "title": "0.4.5"
        }, 
        {
            "location": "/changelog/#044-06052014", 
            "text": "Output can be disabled in all executable tasks by - printed(false)  disabled timeouts by default in ParallelExec  better descriptions for Result output  changed ParallelTask to display failed process in list  Changed Output to be stored globally in Robo\\Runner class  Added  SshTask  by @boedah  Added  RsyncTask  by @boedah  false option added to proceess* callbacks in GenMarkDownTask to skip processing", 
            "title": "0.4.4 06/05/2014"
        }, 
        {
            "location": "/changelog/#043-05212014", 
            "text": "added  SemVer  task by  @jadb  yell  output method added  task  FileSystemStack  added  MirrorDirTask  added by  @devster  switched to Symfony Filesystem component  options can be used to commands  array arguments can be used in commands", 
            "title": "0.4.3 05/21/2014"
        }, 
        {
            "location": "/changelog/#042-05092014", 
            "text": "ask can now hide answers  Trait Executable added to provide standard way for passing arguments and options  added ComposerDumpAutoload task by  @pmcjury  added FileSystem task by  @jadb  added CommonStack metatsk to have similar interface for all stacked tasks by  @jadb  arguments and options can be passed into variable and used in exec task  passing options into commands", 
            "title": "0.4.2 05/09/2014"
        }, 
        {
            "location": "/changelog/#041-05052014", 
            "text": "[BC]  taskGit  task renamed to  taskGitStack  for compatibility  unit and functional tests added  all command tasks now use Symfony\\Process to execute them  enabled Bower and Concat tasks  added  printed  param to Exec task  codeception  suite  method now returns  $this  timeout options added to Exec task", 
            "title": "0.4.1 05/05/2014"
        }, 
        {
            "location": "/changelog/#040-04272014", 
            "text": "Codeception task added  PHPUnit task improved  Bower task added by @jadb  ParallelExec task added  Symfony Process component used for execution  Task descriptions taken from first line of annotations  CommandInterface  added to use tasks as parameters", 
            "title": "0.4.0 04/27/2014"
        }, 
        {
            "location": "/changelog/#033-02252014", 
            "text": "PHPUnit basic task  fixed doc generation", 
            "title": "0.3.3 02/25/2014"
        }, 
        {
            "location": "/changelog/#035-02212014", 
            "text": "changed generated init template", 
            "title": "0.3.5 02/21/2014"
        }, 
        {
            "location": "/changelog/#034-02212014", 
            "text": "[PackPhar] - executable command will remove hashbang when generated stub file  [Git][Exec] stopOnFail option for Git and Exec stack  [ExecStack] shortcut for executing bash commands in stack", 
            "title": "0.3.4 02/21/2014"
        }, 
        {
            "location": "/changelog/#032-02202014", 
            "text": "release process now includes phar  phar executable method added  git checkout added  phar pack created", 
            "title": "0.3.2 02/20/2014"
        }, 
        {
            "location": "/changelog/#030-02112014", 
            "text": "Dynamic configuration via magic methods  added WriteToFile task  Result class for managing exit codes and error messages", 
            "title": "0.3.0 02/11/2014"
        }, 
        {
            "location": "/changelog/#020-01292014", 
            "text": "Merged Tasks and Traits to same file  Added Watcher task  Added GitHubRelease task  Added Changelog task  Added ReplaceInFile task", 
            "title": "0.2.0 01/29/2014"
        }
    ]
}